/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function (a) {
  
  let e;
    const t = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const r = tinymce.util.Tools.resolve("tinymce.util.Delay");
    const n = tinymce.util.Tools.resolve("tinymce.util.LocalStorage");
    const o = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const i = function (t, e) {
      const r = t || e;
        const n = /^(\d+)([ms]?)$/.exec(`${  r}`);
      return (n[2] ? { s: 1e3, m: 6e4 }[n[2]] : 1) * parseInt(r, 10);
    };
    const u = function (t) {
      const e = a.document.location;
      return t
        .getParam(
          "autosave_prefix",
          "tinymce-autosave-{path}{query}{hash}-{id}-"
        )
        .replace(/{path}/g, e.pathname)
        .replace(/{query}/g, e.search)
        .replace(/{hash}/g, e.hash)
        .replace(/{id}/g, t.id);
    };
    const s =
      ((e = undefined),
      function (t) {
        return e === t;
      });
    const f = function (t, e) {
      if (s(e)) return t.dom.isEmpty(t.getBody());
      const r = o.trim(e);
      if (r === "") return !0;
      const n = new a.DOMParser().parseFromString(r, "text/html");
      return t.dom.isEmpty(n);
    };
    const c = function (t) {
      const e = parseInt(n.getItem(`${u(t)  }time`), 10) || 0;
      return (
        !(
          new Date().getTime() - e >
          i(t.getParam("autosave_retention"), "20m")
        ) || (m(t, !1), !1)
      );
    };
    var m = function (t, e) {
      const r = u(t);
      n.removeItem(`${r  }draft`),
        n.removeItem(`${r  }time`),
        !1 !== e && t.fire("RemoveDraft");
    };
    const l = function (t) {
      const e = u(t);
      !f(t) &&
        t.isDirty() &&
        (n.setItem(`${e  }draft`, t.getContent({ format: "raw", no_events: !0 })),
        n.setItem(`${e  }time`, new Date().getTime().toString()),
        t.fire("StoreDraft"));
    };
    const v = function (t) {
      const e = u(t);
      c(t) &&
        (t.setContent(n.getItem(`${e  }draft`), { format: "raw" }),
        t.fire("RestoreDraft"));
    };
    const d = function (t) {
      const e = i(t.getParam("autosave_interval"), "30s");
      r.setInterval(function () {
        t.removed || l(t);
      }, e);
    };
    const g = function (t) {
      t.undoManager.transact(function () {
        v(t), m(t);
      }),
        t.focus();
    };
    const y = tinymce.util.Tools.resolve("tinymce.EditorManager");
    const D = function (r) {
      return function (t) {
        t.setDisabled(!c(r));
        const e = function () {
          return t.setDisabled(!c(r));
        };
        return (
          r.on("StoreDraft RestoreDraft RemoveDraft", e),
          function () {
            return r.off("StoreDraft RestoreDraft RemoveDraft", e);
          }
        );
      };
    };
  !(function p() {
    t.add("autosave", function (t) {
      let e; let r;
      return (
        t.editorManager.on("BeforeUnload", function (t) {
          let e;
          o.each(y.get(), function (t) {
            t.plugins.autosave && t.plugins.autosave.storeDraft(),
              !e &&
                t.isDirty() &&
                t.getParam("autosave_ask_before_unload", !0) &&
                (e = t.translate(
                  "You have unsaved changes are you sure you want to navigate away?"
                ));
          }),
            e && (t.preventDefault(), (t.returnValue = e));
        }),
        d((e = t)),
        e.ui.registry.addButton("restoredraft", {
          tooltip: "Restore last draft",
          icon: "restore-draft",
          onAction () {
            g(e);
          },
          onSetup: D(e),
        }),
        e.ui.registry.addMenuItem("restoredraft", {
          text: "Restore last draft",
          icon: "restore-draft",
          onAction () {
            g(e);
          },
          onSetup: D(e),
        }),
        t.on("init", function () {
          t.getParam("autosave_restore_when_empty", !1) &&
            t.dom.isEmpty(t.getBody()) &&
            v(t);
        }),
        (r = t),
        {
          hasDraft () {
            return c(r);
          },
          storeDraft () {
            return l(r);
          },
          restoreDraft () {
            return v(r);
          },
          removeDraft (t) {
            return m(r, t);
          },
          isEmpty (t) {
            return f(r, t);
          },
        }
      );
    });
  })();
})(window);
