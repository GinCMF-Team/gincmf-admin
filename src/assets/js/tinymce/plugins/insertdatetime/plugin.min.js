/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  const e = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const u = function (e) {
      return e.getParam("insertdatetime_timeformat", e.translate("%H:%M:%S"));
    };
    const c = function (e) {
      return e.getParam("insertdatetime_formats", [
        "%H:%M:%S",
        "%Y-%m-%d",
        "%I:%M:%S %p",
        "%D",
      ]);
    };
    const r = "Sun Mon Tue Wed Thu Fri Sat Sun".split(" ");
    const a = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday Sunday".split(
      " "
    );
    const i = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" ");
    const o = "January February March April May June July August September October November December".split(
      " "
    );
    const m = function (e, t) {
      if ((e = `${  e}`).length < t)
        for (let n = 0; n < t - e.length; n++) e = `0${  e}`;
      return e;
    };
    const s = function (e, t, n) {
      return (
        (n = n || new Date()),
        (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = (t = t.replace(
          "%D",
          "%m/%d/%Y"
        )).replace("%r", "%I:%M:%S %p")).replace(
          "%Y",
          `${  n.getFullYear()}`
        )).replace("%y", `${  n.getYear()}`)).replace(
          "%m",
          m(n.getMonth() + 1, 2)
        )).replace("%d", m(n.getDate(), 2))).replace(
          "%H",
          `${  m(n.getHours(), 2)}`
        )).replace("%M", `${  m(n.getMinutes(), 2)}`)).replace(
          "%S",
          `${  m(n.getSeconds(), 2)}`
        )).replace("%I", `${  ((n.getHours() + 11) % 12) + 1}`)).replace(
          "%p",
          n.getHours() < 12 ? "AM" : "PM"
        )).replace("%B", `${  e.translate(o[n.getMonth()])}`)).replace(
          "%b",
          `${  e.translate(i[n.getMonth()])}`
        )).replace("%A", `${  e.translate(a[n.getDay()])}`)).replace(
          "%a",
          `${  e.translate(r[n.getDay()])}`
        )).replace("%%", "%"))
      );
    };
    const l = function (e, t) {
      if (e.getParam("insertdatetime_element", !1)) {
        const n = s(e, t);
          let r = void 0;
        r = /%[HMSIp]/.test(t) ? s(e, "%Y-%m-%dT%H:%M") : s(e, "%Y-%m-%d");
        const a = e.dom.getParent(e.selection.getStart(), "time");
        a
          ? ((o = a),
            (u = r),
            (c = n),
            (m = (i = e).dom.create("time", { datetime: u }, c)),
            o.parentNode.insertBefore(m, o),
            i.dom.remove(o),
            i.selection.select(m, !0),
            i.selection.collapse(!1))
          : e.insertContent(`<time datetime="${  r  }">${  n  }</time>`);
      } else e.insertContent(s(e, t));
      let i; let o; let u; let c; let m;
    };
    const t = function (t) {
      t.addCommand("mceInsertDate", function () {
        let e;
        l(
          t,
          (e = t).getParam("insertdatetime_dateformat", e.translate("%Y-%m-%d"))
        );
      }),
        t.addCommand("mceInsertTime", function () {
          l(t, u(t));
        });
    };
    const d = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const n = function (n) {
      let e;
        let t;
        let r;
        let a;
        const i = c(n);
        const o =
          ((a = c((r = n))),
          (e = a.length > 0 ? a[0] : u(r)),
          (t = e),
          {
            get () {
              return t;
            },
            set (e) {
              t = e;
            },
          });
      n.ui.registry.addSplitButton("insertdatetime", {
        icon: "insert-time",
        tooltip: "Insert date/time",
        select (e) {
          return e === o.get();
        },
        fetch (e) {
          e(
            d.map(i, function (e) {
              return { type: "choiceitem", text: s(n, e), value: e };
            })
          );
        },
        onAction (e) {
          l(n, o.get());
        },
        onItemAction (e, t) {
          o.set(t), l(n, t);
        },
      });
      n.ui.registry.addNestedMenuItem("insertdatetime", {
        icon: "insert-time",
        text: "Date/time",
        getSubmenuItems () {
          return d.map(i, function (e) {
            return {
              type: "menuitem",
              text: s(n, e),
              onAction:
                ((t = e),
                function () {
                  o.set(t), l(n, t);
                }),
            };
            let t;
          });
        },
      });
    };
  !(function p() {
    e.add("insertdatetime", function (e) {
      t(e), n(e);
    });
  })();
})();
