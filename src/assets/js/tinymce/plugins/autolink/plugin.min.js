/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  const e = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const i = tinymce.util.Tools.resolve("tinymce.Env");
    const o = function (e, t) {
      if ((t < 0 && (t = 0), e.nodeType === 3)) {
        const n = e.data.length;
        n < t && (t = n);
      }
      return t;
    };
    const y = function (e, t, n) {
      t.nodeType !== 1 || t.hasChildNodes()
        ? e.setStart(t, o(t, n))
        : e.setStartBefore(t);
    };
    const k = function (e, t, n) {
      t.nodeType !== 1 || t.hasChildNodes()
        ? e.setEnd(t, o(t, n))
        : e.setEndAfter(t);
    };
    const r = function (e, t, n) {
      let i;
        let o;
        let r;
        let a;
        let s;
        let f;
        let l;
        const d = e.getParam(
          "autolink_pattern",
          /^(https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.|(?:mailto:)?[A-Z0-9._%+\-]+@(?!.*@))(.+)$/i
        );
        const c = e.getParam("default_link_target", !1);
      if (e.selection.getNode().tagName !== "A") {
        const g = e.selection.getRng().cloneRange();
        if (g.startOffset < 5) {
          if (!(s = g.endContainer.previousSibling)) {
            if (
              !g.endContainer.firstChild ||
              !g.endContainer.firstChild.nextSibling
            )
              return;
            s = g.endContainer.firstChild.nextSibling;
          }
          if (((f = s.length), y(g, s, f), k(g, s, f), g.endOffset < 5)) return;
          (i = g.endOffset), (o = s);
        } else {
          if ((o = g.endContainer).nodeType !== 3 && o.firstChild) {
            for (; o.nodeType !== 3 && o.firstChild; ) o = o.firstChild;
            o.nodeType === 3 && (y(g, o, 0), k(g, o, o.nodeValue.length));
          }
          i = g.endOffset === 1 ? 2 : g.endOffset - 1 - t;
        }
        for (
          var u, h = i;
          y(g, o, i >= 2 ? i - 2 : 0),
            k(g, o, i >= 1 ? i - 1 : 0),
            --i,
            (l = g.toString()) !== " " &&
              l !== "" &&
              l.charCodeAt(0) !== 160 &&
              i - 2 >= 0 &&
              l !== n;

        );
        (u = g.toString()) === n || u === " " || u.charCodeAt(0) === 160
          ? (y(g, o, i), k(g, o, h), (i += 1))
          : (g.startOffset === 0 ? y(g, o, 0) : y(g, o, i), k(g, o, h)),
          (a = g.toString()).charAt(a.length - 1) === "." && k(g, o, h - 1);
        const m = (a = g.toString().trim()).match(d);
          const C = e.getParam("link_default_protocol", "http", "string");
        m &&
          (m[1] === "www."
            ? (m[1] = `${C  }://www.`)
            : /@$/.test(m[1]) &&
              !/^mailto:/.test(m[1]) &&
              (m[1] = `mailto:${  m[1]}`),
          (r = e.selection.getBookmark()),
          e.selection.setRng(g),
          e.execCommand("createlink", !1, m[1] + m[2]),
          !1 !== c && e.dom.setAttrib(e.selection.getNode(), "target", c),
          e.selection.moveToBookmark(r),
          e.nodeChanged());
      }
    };
    const t = function (t) {
      let n;
      t.on("keydown", function (e) {
        if (e.keyCode !== 13);
        else r(t, -1, "");
      }),
        i.browser.isIE()
          ? t.on("focus", function () {
              if (!n) {
                n = !0;
                try {
                  t.execCommand("AutoUrlDetect", !1, !0);
                } catch (e) {}
              }
            })
          : (t.on("keypress", function (e) {
              if (e.keyCode !== 41);
              else r(t, -1, "(");
            }),
            t.on("keyup", function (e) {
              if (e.keyCode !== 32);
              else r(t, 0, "");
            }));
    };
  !(function n() {
    e.add("autolink", function (e) {
      t(e);
    });
  })();
})();
