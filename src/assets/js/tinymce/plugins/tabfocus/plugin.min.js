/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function (s) {
  
  const e = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const t = tinymce.util.Tools.resolve("tinymce.dom.DOMUtils");
    const a = tinymce.util.Tools.resolve("tinymce.EditorManager");
    const y = tinymce.util.Tools.resolve("tinymce.Env");
    const f = tinymce.util.Tools.resolve("tinymce.util.Delay");
    const d = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const m = tinymce.util.Tools.resolve("tinymce.util.VK");
    const v = t.DOM;
    const n = function (e) {
      e.keyCode !== m.TAB ||
        e.ctrlKey ||
        e.altKey ||
        e.metaKey ||
        e.preventDefault();
    };
    const i = function (c) {
      function e(n) {
        let i; let o; let l;
        if (
          !(
            n.keyCode !== m.TAB ||
            n.ctrlKey ||
            n.altKey ||
            n.metaKey ||
            n.isDefaultPrevented()
          )
        ) {
          let e;
            const t = d.explode(
              (e = c).getParam(
                "tab_focus",
                e.getParam("tabfocus_elements", ":prev,:next")
              )
            );
          if (
            (t.length === 1 && ((t[1] = t[0]), (t[0] = ":prev")),
            (o = n.shiftKey
              ? t[0] === ":prev"
                ? r(-1)
                : v.get(t[0])
              : t[1] === ":next"
              ? r(1)
              : v.get(t[1])))
          ) {
            const u = a.get(o.id || o.name);
            o.id && u
              ? u.focus()
              : f.setTimeout(function () {
                  y.webkit || s.window.focus(), o.focus();
                }, 10),
              n.preventDefault();
          }
        }
        function r(e) {
          function t(e) {
            return (
              /INPUT|TEXTAREA|BUTTON/.test(e.tagName) &&
              a.get(n.id) &&
              e.tabIndex !== -1 &&
              (function t(e) {
                return (
                  e.nodeName === "BODY" ||
                  (e.type !== "hidden" &&
                    e.style.display !== "none" &&
                    e.style.visibility !== "hidden" &&
                    t(e.parentNode))
                );
              })(e)
            );
          }
          if (
            ((o = v.select(":input:enabled,*[tabindex]:not(iframe)")),
            d.each(o, function (e, t) {
              if (e.id === c.id) return (i = t), !1;
            }),
            e > 0)
          ) {
            for (l = i + 1; l < o.length; l++) if (t(o[l])) return o[l];
          } else for (l = i - 1; l >= 0; l--) if (t(o[l])) return o[l];
          return null;
        }
      }
      c.on("init", function () {
        c.inline && v.setAttrib(c.getBody(), "tabIndex", null),
          c.on("keyup", n),
          y.gecko ? c.on("keypress keydown", e) : c.on("keydown", e);
      });
    };
  !(function o() {
    e.add("tabfocus", function (e) {
      i(e);
    });
  })();
})(window);
