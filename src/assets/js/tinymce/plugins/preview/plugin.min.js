/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  const e = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const g = tinymce.util.Tools.resolve("tinymce.Env");
    const w = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const i = function (e) {
      const t = (function (t) {
        let n = "";
          const i = t.dom.encode;
          const e = t.getParam("content_style", "");
        (n += `<base href="${  i(t.documentBaseURI.getURI())  }">`),
          e && (n += `<style type="text/css">${  e  }</style>`);
        const o = t.getParam("content_css_cors", !1, "boolean")
          ? ' crossorigin="anonymous"'
          : "";
        w.each(t.contentCSS, function (e) {
          n +=
            `<link type="text/css" rel="stylesheet" href="${ 
            i(t.documentBaseURI.toAbsolute(e)) 
            }"${ 
            o 
            }>`;
        });
        let r;
          let a;
          let c;
          let s;
          let d;
          let m;
          let l;
          const u =
            (s = (r = t).getParam("body_id", "tinymce", "string")).indexOf("=") ===
            -1
              ? s
              : (c = (a = r).getParam("body_id", "", "hash"))[a.id] || c;
          const y =
            (l = (d = t).getParam("body_class", "", "string")).indexOf("=") ===
            -1
              ? l
              : (m = d).getParam("body_class", "", "hash")[m.id] || "";
          const v =
            `<script>document.addEventListener && document.addEventListener("click", function(e) {for (var elm = e.target; elm; elm = elm.parentNode) {if (elm.nodeName === "A" && !(${ 
            g.mac ? "e.metaKey" : "e.ctrlKey && !e.altKey" 
            })) {e.preventDefault();}}}, false);</script> `;
          const f = t.getBody().dir;
          const p = f ? ` dir="${  i(f)  }"` : "";
        return (
          `<!DOCTYPE html><html><head>${ 
          n 
          }</head><body id="${ 
          i(u) 
          }" class="mce-content-body ${ 
          i(y) 
          }"${ 
          p 
          }>${ 
          t.getContent() 
          }${v 
          }</body></html>`
        );
      })(e);
      e.windowManager
        .open({
          title: "Preview",
          size: "large",
          body: {
            type: "panel",
            items: [{ name: "preview", type: "iframe", sandboxed: !0 }],
          },
          buttons: [
            { type: "cancel", name: "close", text: "Close", primary: !0 },
          ],
          initialData: { preview: t },
        })
        .focus("close");
    };
  !(function t() {
    e.add("preview", function (e) {
      let t; let n;
      (t = e).addCommand("mcePreview", function () {
        i(t);
      }),
        (n = e).ui.registry.addButton("preview", {
          icon: "preview",
          tooltip: "Preview",
          onAction () {
            return n.execCommand("mcePreview");
          },
        }),
        n.ui.registry.addMenuItem("preview", {
          icon: "preview",
          text: "Preview",
          onAction () {
            return n.execCommand("mcePreview");
          },
        });
    });
  })();
})();
