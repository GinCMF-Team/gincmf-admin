/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function (y) {
  
  let e;
    let t;
    let n;
    let r;
    const p = function (e) {
      let t = e;
      return {
        get () {
          return t;
        },
        set (e) {
          t = e;
        },
      };
    };
    const c = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const o = function (e, t) {
      return e.fire("PastePlainTextToggle", { state: t });
    };
    const f = function (n, r) {
      n.addCommand("mceTogglePlainTextPaste", function () {
        let e; let t;
        (e = n),
          (t = r).pasteFormat.get() === "text"
            ? (t.pasteFormat.set("html"), o(e, !1))
            : (t.pasteFormat.set("text"), o(e, !0)),
          e.focus();
      }),
        n.addCommand("mceInsertClipboardContent", function (e, t) {
          t.content && r.pasteHtml(t.content, t.internal),
            t.text && r.pasteText(t.text);
        });
    };
    const a = function (e) {
      return function () {
        return e;
      };
    };
    const i = a(!1);
    const s = a(!0);
    const u = function () {
      return l;
    };
    var l =
      ((e = function (e) {
        return e.isNone();
      }),
      {
        fold (e, t) {
          return e();
        },
        is: i,
        isSome: i,
        isNone: s,
        getOr: (n = function (e) {
          return e;
        }),
        getOrThunk: (t = function (e) {
          return e();
        }),
        getOrDie (e) {
          throw new Error(e || "error: getOrDie called on none.");
        },
        getOrNull: a(null),
        getOrUndefined: a(undefined),
        or: n,
        orThunk: t,
        map: u,
        each () {},
        bind: u,
        exists: i,
        forall: s,
        filter: u,
        equals: e,
        equals_: e,
        toArray () {
          return [];
        },
        toString: a("none()"),
      });
    var d = function (n) {
      const e = a(n);
        const t = function () {
          return o;
        };
        const r = function (e) {
          return e(n);
        };
        var o = {
          fold (e, t) {
            return t(n);
          },
          is (e) {
            return n === e;
          },
          isSome: s,
          isNone: i,
          getOr: e,
          getOrThunk: e,
          getOrDie: e,
          getOrNull: e,
          getOrUndefined: e,
          or: t,
          orThunk: t,
          map (e) {
            return d(e(n));
          },
          each (e) {
            e(n);
          },
          bind: r,
          exists: r,
          forall: r,
          filter (e) {
            return e(n) ? o : l;
          },
          toArray () {
            return [n];
          },
          toString () {
            return `some(${  n  })`;
          },
          equals (e) {
            return e.is(n);
          },
          equals_ (e, t) {
            return e.fold(i, function (e) {
              return t(n, e);
            });
          },
        };
      return o;
    };
    const g = {
      some: d,
      none: u,
      from (e) {
        return e === null || e === undefined ? l : d(e);
      },
    };
    const m =
      ((r = "function"),
      function (e) {
        return typeof e === r;
      });
    const v = Array.prototype.slice;
    const h = function (e, t) {
      for (var n = e.length, r = new Array(n), o = 0; o < n; o++) {
        const a = e[o];
        r[o] = t(a, o);
      }
      return r;
    };
    const b = function (e, t) {
      for (let n = 0, r = e.length; n < r; n++) {
        t(e[n], n);
      }
    };
    const x = m(Array.from)
      ? Array.from
      : function (e) {
          return v.call(e);
        };
    const P = tinymce.util.Tools.resolve("tinymce.Env");
    const w = tinymce.util.Tools.resolve("tinymce.util.Delay");
    const _ = tinymce.util.Tools.resolve("tinymce.util.Promise");
    const T = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const C = tinymce.util.Tools.resolve("tinymce.util.VK");
    const D = "x-tinymce/html";
    const k = `\x3c!-- ${  D  } --\x3e`;
    const S = function (e) {
      return e.indexOf(k) !== -1;
    };
    const O = tinymce.util.Tools.resolve("tinymce.html.Entities");
    const R = function (e, t, n) {
      const r = e.split(/\n\n/);
        const o = (function (e, t) {
          let n;
            const r = [];
            let o = `<${  e}`;
          if (typeof t === "object") {
            for (n in t)
              t.hasOwnProperty(n) &&
                r.push(`${n  }="${  O.encodeAllRaw(t[n])  }"`);
            r.length && (o += ` ${  r.join(" ")}`);
          }
          return `${o  }>`;
        })(t, n);
        const a = `</${  t  }>`;
        const i = T.map(r, function (e) {
          return e.split(/\n/).join("<br />");
        });
      return i.length === 1
        ? i[0]
        : T.map(i, function (e) {
            return o + e + a;
          }).join("");
    };
    const A = tinymce.util.Tools.resolve("tinymce.html.DomParser");
    const I = tinymce.util.Tools.resolve("tinymce.html.Serializer");
    const E = "\xa0";
    const F = tinymce.util.Tools.resolve("tinymce.html.Node");
    const M = tinymce.util.Tools.resolve("tinymce.html.Schema");
    const N = function (e) {
      return e.getParam("paste_data_images", !1);
    };
    const B = function (e) {
      return e.getParam("paste_retain_style_properties");
    };
    const $ = function (e) {
      return e.getParam("validate");
    };
    const H = function (e) {
      return e.getParam("paste_data_images", !1, "boolean");
    };
  function j(t, e) {
    return (
      T.each(e, function (e) {
        t = e.constructor === RegExp ? t.replace(e, "") : t.replace(e[0], e[1]);
      }),
      t
    );
  }
  function L(e) {
    const t = M();
      const n = A({}, t);
      let r = "";
      const o = t.getShortEndedElements();
      const a = T.makeMap(
        "script noscript style textarea video audio iframe object",
        " "
      );
      const i = t.getBlockElements();
    return (
      (e = j(e, [/<!\[[^\]]+\]>/g])),
      (function s(e) {
        const t = e.name;
          const n = e;
        if (t !== "br") {
          if (t !== "wbr")
            if ((o[t] && (r += " "), a[t])) r += " ";
            else {
              if (
                (e.type === 3 && (r += e.value),
                !e.shortEnded && (e = e.firstChild))
              )
                for (; s(e), (e = e.next); );
              i[t] && n.next && ((r += "\n"), t === "p" && (r += "\n"));
            }
        } else r += "\n";
      })(n.parse(e)),
      r
    );
  }
  function z(e) {
    return (e = j(e, [
      /^[\s\S]*<body[^>]*>\s*|\s*<\/body[^>]*>[\s\S]*$/gi,
      /<!--StartFragment-->|<!--EndFragment-->/g,
      [
        /( ?)<span class="Apple-converted-space">\u00a0<\/span>( ?)/g,
        function r(e, t, n) {
          return t || n ? E : " ";
        },
      ],
      /<br class="Apple-interchange-newline">/g,
      /<br>$/i,
    ]));
  }
  const U = function () {
    return y.navigator.userAgent.indexOf(" Edge/") !== -1;
  };
  function q(e) {
    return (
      /<font face="Times New Roman"|class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i.test(
        e
      ) ||
      /class="OutlineElement/.test(e) ||
      /id="?docs\-internal\-guid\-/.test(e)
    );
  }
  function V(t) {
    let n;
    return (
      (t = t.replace(/^[\u00a0 ]+/, "")),
      T.each(
        [
          /^[IVXLMCD]{1,2}\.[ \u00a0]/,
          /^[ivxlmcd]{1,2}\.[ \u00a0]/,
          /^[a-z]{1,2}[\.\)][ \u00a0]/,
          /^[A-Z]{1,2}[\.\)][ \u00a0]/,
          /^[0-9]+\.[ \u00a0]/,
          /^[\u3007\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d]+\.[ \u00a0]/,
          /^[\u58f1\u5f10\u53c2\u56db\u4f0d\u516d\u4e03\u516b\u4e5d\u62fe]+\.[ \u00a0]/,
        ],
        function (e) {
          if (e.test(t)) return !(n = !0);
        }
      ),
      n
    );
  }
  function K(e) {
    let a;
      let i;
      let s = 1;
    function n(e) {
      let t = "";
      if (e.type === 3) return e.value;
      if ((e = e.firstChild)) for (; (t += n(e)), (e = e.next); );
      return t;
    }
    function u(e, t) {
      if (e.type !== 3 || !t.test(e.value)) {
        if ((e = e.firstChild))
          do {
            if (!u(e, t)) return;
          } while ((e = e.next));
        return 1;
      }
      e.value = e.value.replace(t, "");
    }
    function t(e, t, n) {
      const r = e._listLevel || s;
      r !== s && (a = r < s ? a && a.parent.parent : ((i = a), null)),
        a && a.name === t
          ? a.append(e)
          : ((i = i || a),
            (a = new F(t, 1)),
            n > 1 && a.attr("start", `${  n}`),
            e.wrap(a)),
        (e.name = "li"),
        s < r && i && i.lastChild.append(a),
        (s = r),
        (function o(e) {
          if (e._listIgnore) e.remove();
          else if ((e = e.firstChild)) for (; o(e), (e = e.next); );
        })(e),
        u(e, /^\u00a0+/),
        u(e, /^\s*([\u2022\u00b7\u00a7\u25CF]|\w+\.)/),
        u(e, /^\u00a0+/);
    }
    for (var r = [], o = e.firstChild; o != null; )
      if ((r.push(o), (o = o.walk()) !== null))
        for (; void 0 !== o && o.parent !== e; ) o = o.walk();
    for (let l = 0; l < r.length; l++)
      if ((e = r[l]).name === "p" && e.firstChild) {
        const c = n(e);
        if (/^[\s\u00a0]*[\u2022\u00b7\u00a7\u25CF]\s*/.test(c)) {
          t(e, "ul");
          continue;
        }
        if (V(c)) {
          const f = /([0-9]+)\./.exec(c);
            let d = 1;
          f && (d = parseInt(f[1], 10)), t(e, "ol", d);
          continue;
        }
        if (e._listLevel) {
          t(e, "ul", 1);
          continue;
        }
        a = null;
      } else (i = a), (a = null);
  }
  function X(n, r, o, a) {
    let i;
      let s = {};
      const e = n.dom.parseStyle(a);
    return (
      T.each(e, function (e, t) {
        switch (t) {
          case "mso-list":
            (i = /\w+ \w+([0-9]+)/i.exec(a)) &&
              (o._listLevel = parseInt(i[1], 10)),
              /Ignore/i.test(e) &&
                o.firstChild &&
                ((o._listIgnore = !0), (o.firstChild._listIgnore = !0));
            break;
          case "horiz-align":
            t = "text-align";
            break;
          case "vert-align":
            t = "vertical-align";
            break;
          case "font-color":
          case "mso-foreground":
            t = "color";
            break;
          case "mso-background":
          case "mso-highlight":
            t = "background";
            break;
          case "font-weight":
          case "font-style":
            return void (e !== "normal" && (s[t] = e));
          case "mso-element":
            if (/^(comment|comment-list)$/i.test(e)) return void o.remove();
        }
        t.indexOf("mso-comment") !== 0
          ? t.indexOf("mso-") !== 0 &&
            (B(n) === "all" || (r && r[t])) &&
            (s[t] = e)
          : o.remove();
      }),
      /(bold)/i.test(s["font-weight"]) &&
        (delete s["font-weight"], o.wrap(new F("b", 1))),
      /(italic)/i.test(s["font-style"]) &&
        (delete s["font-style"], o.wrap(new F("i", 1))),
      (s = n.dom.serializeStyle(s, o.name)) || null
    );
  }
  const W = function (e, t) {
      return e.getParam("paste_enable_default_filters", !0)
        ? (function (r, e) {
            let o;
              const t = B(r);
            t && (o = T.makeMap(t.split(/[, ]/))),
              (e = j(e, [
                /<br class="?Apple-interchange-newline"?>/gi,
                /<b[^>]+id="?docs-internal-[^>]*>/gi,
                /<!--[\s\S]+?-->/gi,
                /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi,
                [/<(\/?)s>/gi, "<$1strike>"],
                [/&nbsp;/gi, E],
                [
                  /<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi,
                  function (e, t) {
                    return t.length > 0
                      ? t
                          .replace(/./, " ")
                          .slice(Math.floor(t.length / 2))
                          .split("")
                          .join(E)
                      : "";
                  },
                ],
              ]));
            const n = r.getParam(
                "paste_word_valid_elements",
                "-strong/b,-em/i,-u,-span,-p,-ol,-ul,-li,-h1,-h2,-h3,-h4,-h5,-h6,-p/div,-a[href|name],sub,sup,strike,br,del,table[width],tr,td[colspan|rowspan|width],th[colspan|rowspan|width],thead,tfoot,tbody"
              );
              const a = M({ valid_elements: n, valid_children: "-li[p]" });
            T.each(a.elements, function (e) {
              e.attributes.class ||
                ((e.attributes.class = {}), e.attributesOrder.push("class")),
                e.attributes.style ||
                  ((e.attributes.style = {}), e.attributesOrder.push("style"));
            });
            const i = A({}, a);
            i.addAttributeFilter("style", function (e) {
              for (var t, n = e.length; n--; )
                (t = e[n]).attr("style", X(r, o, t, t.attr("style"))),
                  t.name === "span" &&
                    t.parent &&
                    !t.attributes.length &&
                    t.unwrap();
            }),
              i.addAttributeFilter("class", function (e) {
                for (var t, n, r = e.length; r--; )
                  (n = (t = e[r]).attr("class")),
                    /^(MsoCommentReference|MsoCommentText|msoDel)$/i.test(n) &&
                      t.remove(),
                    t.attr("class", null);
              }),
              i.addNodeFilter("del", function (e) {
                for (let t = e.length; t--; ) e[t].remove();
              }),
              i.addNodeFilter("a", function (e) {
                for (var t, n, r, o = e.length; o--; )
                  if (
                    ((n = (t = e[o]).attr("href")),
                    (r = t.attr("name")),
                    n && n.indexOf("#_msocom_") !== -1)
                  )
                    t.remove();
                  else if (
                    (n &&
                      n.indexOf("file://") === 0 &&
                      (n = (n = n.split("#")[1]) && `#${  n}`),
                    n || r)
                  ) {
                    if (r && !/^_?(?:toc|edn|ftn)/i.test(r)) {
                      t.unwrap();
                      continue;
                    }
                    t.attr({ href: n, name: r });
                  } else t.unwrap();
              });
            const s = i.parse(e);
            return (
              r.getParam("paste_convert_word_fake_lists", !0) && K(s),
              (e = I({ validate: $(r) }, a).serialize(s))
            );
          })(e, t)
        : t;
    };
    const Y = function (e, t) {
      return { content: e, cancelled: t };
    };
    const Z = function (e, t, n, r) {
      let o;
        let a;
        let i;
        let s;
        let u;
        let l;
        let c;
        let f;
        let d;
        let m;
        let p;
        let g;
        const v =
          ((o = t),
          (a = n),
          (i = r),
          e.fire("PastePreProcess", {
            content: o,
            internal: a,
            wordContent: i,
          }));
        const h = (function (e, t) {
          const n = A({}, e.schema);
          n.addNodeFilter("meta", function (e) {
            T.each(e, function (e) {
              return e.remove();
            });
          });
          const r = n.parse(t, { forced_root_block: !1, isRootContent: !0 });
          return I({ validate: $(e) }, e.schema).serialize(r);
        })(e, v.content);
      return e.hasEventListeners("PastePostProcess") && !v.isDefaultPrevented()
        ? ((u = h),
          (l = n),
          (c = r),
          (p = (s = e).dom.create("div", { style: "display:none" }, u)),
          (f = p),
          (d = l),
          (m = c),
          (g = s.fire("PastePostProcess", {
            node: f,
            internal: d,
            wordContent: m,
          })),
          Y(g.node.innerHTML, g.isDefaultPrevented()))
        : Y(h, v.isDefaultPrevented());
    };
    const G = function (e, t) {
      return (
        e.insertContent(t, {
          merge: e.getParam("paste_merge_formats", !0),
          paste: !0,
        }),
        !0
      );
    };
    const J = function (e) {
      return /^https?:\/\/[\w\?\-\/+=.&%@~#]+$/i.test(e);
    };
    const Q = function (e) {
      return J(e) && /.(gif|jpe?g|png)$/.test(e);
    };
    const ee = function (e, t, n) {
      return (
        !(!1 !== e.selection.isCollapsed() || !J(t)) &&
        ((o = t),
        (a = n),
        (r = e).undoManager.extra(
          function () {
            a(r, o);
          },
          function () {
            r.execCommand("mceInsertLink", !1, o);
          }
        ),
        !0)
      );
      let r; let o; let a;
    };
    const te = function (e, t, n) {
      return (
        !!Q(t) &&
        ((o = t),
        (a = n),
        (r = e).undoManager.extra(
          function () {
            a(r, o);
          },
          function () {
            r.insertContent(`<img src="${  o  }">`);
          }
        ),
        !0)
      );
      let r; let o; let a;
    };
    const ne = function (e, t, n) {
      let r; let o;
      n || !1 === e.getParam("smart_paste", !0)
        ? G(e, t)
        : ((r = e),
          (o = t),
          T.each([ee, te, G], function (e) {
            return !0 !== e(r, o, G);
          }));
    };
    const re = function (e) {
      return e === "\n" || e === "\r";
    };
    const oe = function (o) {
      let t; let n;
      return ((n = {
        pcIsSpace: !(t = function (e, t) {
          return " \f\t\x0B".indexOf(t) !== -1 || t === E
            ? e.pcIsSpace ||
              e.str === "" ||
              e.str.length === o.length - 1 ||
              ((n = o), (r = e.str.length + 1) < n.length && r >= 0 && re(n[r]))
              ? { pcIsSpace: !1, str: e.str + E }
              : { pcIsSpace: !0, str: `${e.str  } ` }
            : { pcIsSpace: re(t), str: e.str + t };
          let n; let r;
        }),
        str: "",
      }),
      b(o, function (e) {
        n = t(n, e);
      }),
      n).str;
    };
    const ae = function (e, t, n, r) {
      let o;
        let a;
        let i;
        let s;
        let u;
        const l =
          ((o = e),
          (i = n),
          (s = q((a = t))),
          (u = s ? W(o, a) : a),
          Z(o, u, i, s));
      !1 === l.cancelled && ne(e, l.content, r);
    };
    const ie = function (e, t, n) {
      const r = n || S(t);
      ae(e, t.replace(k, ""), r, !1);
    };
    const se = function (e, t) {
      let n;
        let r;
        let o;
        const a = e.dom.encode(t).replace(/\r\n/g, "\n");
        const i = oe(a);
        const s =
          ((n = i),
          (r = e.getParam("forced_root_block")),
          (o = e.getParam("forced_root_block_attrs")),
          r ? R(n, !0 === r ? "p" : r, o) : n.replace(/\r?\n/g, "<br>"));
      ae(e, s, !1, !0);
    };
    const ue = function (e) {
      const t = {};
      if (e) {
        if (e.getData) {
          const n = e.getData("Text");
          n &&
            n.length > 0 &&
            n.indexOf("data:text/mce-internal,") === -1 &&
            (t["text/plain"] = n);
        }
        if (e.types)
          for (let r = 0; r < e.types.length; r++) {
            const o = e.types[r];
            try {
              t[o] = e.getData(o);
            } catch (a) {
              t[o] = "";
            }
          }
      }
      return t;
    };
    const le = function (e, t) {
      return t in e && e[t].length > 0;
    };
    const ce = function (e) {
      return le(e, "text/html") || le(e, "text/plain");
    };
    const fe = (function He(e) {
      let t = 0;
      return function () {
        return e + t++;
      };
    })("mceclip");
    const de = function (e, t) {
      let n;
        let r;
        let o;
        let a;
        let i;
        let s;
        let u;
        const l =
          ((n = t.uri),
          (r = /data:([^;]+);base64,([a-z0-9\+\/=]+)/i.exec(n))
            ? { type: r[1], data: decodeURIComponent(r[2]) }
            : { type: null, data: null });
        const c = l.data;
        const f = l.type;
        const d = fe();
        const m =
          e.getParam("images_reuse_filename") && t.blob.name
            ? ((o = e),
              (a = t.blob.name),
              (i = a.match(/([\s\S]+?)\.(?:jpeg|jpg|png|gif)$/i))
                ? o.dom.encode(i[1])
                : null)
            : d;
        const p = new y.Image();
      if (
        ((p.src = t.uri),
        (s = p),
        !(u = e.getParam("images_dataimg_filter")) || u(s))
      ) {
        const g = e.editorUpload.blobCache;
          let v = void 0;
          const h = g.getByData(c, f);
        h ? (v = h) : ((v = g.create(d, t.blob, c, m)), g.add(v)),
          ie(e, `<img src="${  v.blobUri()  }">`, !1);
      } else ie(e, `<img src="${  t.uri  }">`, !1);
    };
    const me = function (t, e, n) {
      let r;
        let o;
        let a;
        let i;
        const s = e.type === "paste" ? e.clipboardData : e.dataTransfer;
      if (H(t) && s) {
        const u =
          ((a = (o = s).items
            ? h(x(o.items), function (e) {
                return e.getAsFile();
              })
            : []),
          (i = o.files ? x(o.files) : []),
          (function (e, t) {
            for (var n = [], r = 0, o = e.length; r < o; r++) {
              const a = e[r];
              t(a, r) && n.push(a);
            }
            return n;
          })(a.length > 0 ? a : i, function (e) {
            return /^image\/(jpeg|png|gif|bmp)$/.test(e.type);
          }));
        if (u.length > 0)
          return (
            e.preventDefault(),
            (r = u),
            _.all(
              h(r, function (r) {
                return new _(function (e) {
                  const t = r.getAsFile ? r.getAsFile() : r;
                    const n = new window.FileReader();
                  (n.onload = function () {
                    e({ blob: t, uri: n.result });
                  }),
                    n.readAsDataURL(t);
                });
              })
            ).then(function (e) {
              n && t.selection.setRng(n),
                b(e, function (e) {
                  de(t, e);
                });
            }),
            !0
          );
      }
      return !1;
    };
    const pe = function (e) {
      return (
        (C.metaKeyPressed(e) && e.keyCode === 86) ||
        (e.shiftKey && e.keyCode === 45)
      );
    };
    const ge = function (u, l, c) {
      let t;
        let f;
        const d =
          ((t = p(g.none())),
          {
            clear () {
              t.set(g.none());
            },
            set (e) {
              t.set(g.some(e));
            },
            isSet () {
              return t.get().isSome();
            },
            on (e) {
              t.get().each(e);
            },
          });
      function m(e, t, n, r) {
        let o;
        le(e, "text/html")
          ? (o = e["text/html"])
          : ((o = l.getHtml()),
            (r = r || S(o)),
            l.isDefaultContent(o) && (n = !0)),
          (o = z(o)),
          l.remove();
        const a =
            !1 === r &&
            !/<(?:\/?(?!(?:div|p|br|span)>)\w+|(?:(?!(?:span style="white-space:\s?pre;?">)|br\s?\/>))\w+\s[^>]+)>/i.test(
              o
            );
          const i = Q(o);
        (o.length && (!a || i)) || (n = !0),
          (n || i) && (o = le(e, "text/plain") && a ? e["text/plain"] : L(o)),
          l.isDefaultContent(o)
            ? t ||
              u.windowManager.alert(
                "Please use Ctrl+V/Cmd+V keyboard shortcuts to paste contents."
              )
            : n
            ? se(u, o)
            : ie(u, o, r);
      }
      u.on("keydown", function (e) {
        function t(e) {
          pe(e) && !e.isDefaultPrevented() && l.remove();
        }
        if (pe(e) && !e.isDefaultPrevented()) {
          if (
            (f = e.shiftKey && e.keyCode === 86) &&
            P.webkit &&
            y.navigator.userAgent.indexOf("Version/") !== -1
          )
            return;
          if (
            (e.stopImmediatePropagation(),
            d.set(e),
            window.setTimeout(function () {
              d.clear();
            }, 100),
            P.ie && f)
          )
            return (
              e.preventDefault(), (n = !0), void u.fire("paste", { ieFake: n })
            );
          l.remove(),
            l.create(),
            u.once("keyup", t),
            u.once("paste", function () {
              u.off("keyup", t);
            });
        }
        let n;
      });
      u.on("paste", function (e) {
        let t;
          let n;
          let r;
          const o = d.isSet();
          const a =
            ((t = u),
            (n = ue(e.clipboardData || t.getDoc().dataTransfer)),
            U() ? T.extend(n, { "text/html": "" }) : n);
          const i = c.get() === "text" || f;
          let s = le(a, D);
        ((f = !1),
        e.isDefaultPrevented() ||
          ((r = e.clipboardData),
          y.navigator.userAgent.indexOf("Android") !== -1 &&
            r &&
            r.items &&
            r.items.length === 0))
          ? l.remove()
          : ce(a) || !me(u, e, l.getLastRng() || u.selection.getRng())
          ? (o || e.preventDefault(),
            !P.ie ||
              (o && !e.ieFake) ||
              le(a, "text/html") ||
              (l.create(),
              u.dom.bind(l.getEl(), "paste", function (e) {
                e.stopPropagation();
              }),
              u.getDoc().execCommand("Paste", !1, null),
              (a["text/html"] = l.getHtml())),
            le(a, "text/html")
              ? (e.preventDefault(),
                (s = s || S(a["text/html"])),
                m(a, o, i, s))
              : w.setEditorTimeout(
                  u,
                  function () {
                    m(a, o, i, s);
                  },
                  0
                ))
          : l.remove();
      });
    };
    const ve = function (i, e, t) {
      let s;
      ge(i, e, t),
        i.parser.addNodeFilter("img", function (e, t, n) {
          let r;
            const o = function (e) {
              e.attr("data-mce-object") || s === P.transparentSrc || e.remove();
            };
          if (!H(i) && (r = n).data && !0 === r.data.paste)
            for (let a = e.length; a--; )
              (s = e[a].attr("src")) &&
                (s.indexOf("webkit-fake-url") === 0
                  ? o(e[a])
                  : i.getParam("allow_html_data_urls", !1, "boolean") ||
                    s.indexOf("data:") !== 0 ||
                    o(e[a]));
        });
    };
    const he = function (e) {
      return P.ie && e.inline ? y.document.body : e.getBody();
    };
    const ye = function (t, e, n) {
      let r;
      he((r = t)) !== r.getBody() &&
        t.dom.bind(e, "paste keyup", function (e) {
          Pe(t, n) || t.fire("paste");
        });
    };
    const be = function (e) {
      return e.dom.get("mcepastebin");
    };
    const xe = function (e, t) {
      return t === e;
    };
    var Pe = function (e, t) {
      let n;
        const r = be(e);
      return (n = r) && n.id === "mcepastebin" && xe(t, r.innerHTML);
    };
    const we = function (e) {
      const t = p(null);
        const n = "%MCEPASTEBIN%";
      return {
        create () {
          return (function (e, t, n) {
            const r = e.dom;
              const o = e.getBody();
            t.set(e.selection.getRng());
            const a = e.dom.add(
              he(e),
              "div",
              {
                id: "mcepastebin",
                class: "mce-pastebin",
                contentEditable: !0,
                "data-mce-bogus": "all",
                style:
                  "position: fixed; top: 50%; width: 10px; height: 10px; overflow: hidden; opacity: 0",
              },
              n
            );
            (P.ie || P.gecko) &&
              r.setStyle(
                a,
                "left",
                r.getStyle(o, "direction", !0) === "rtl" ? 65535 : -65535
              ),
              r.bind(a, "beforedeactivate focusin focusout", function (e) {
                e.stopPropagation();
              }),
              ye(e, a, n),
              a.focus(),
              e.selection.select(a, !0);
          })(e, t, n);
        },
        remove () {
          return (function (e, t) {
            if (be(e)) {
              for (
                var n = void 0, r = t.get();
                (n = e.dom.get("mcepastebin"));

              )
                e.dom.remove(n), e.dom.unbind(n);
              r && e.selection.setRng(r);
            }
            t.set(null);
          })(e, t);
        },
        getEl () {
          return be(e);
        },
        getHtml () {
          return (function (n) {
            const t = function (e, t) {
                e.appendChild(t), n.dom.remove(t, !0);
              };
              const e = T.grep(he(n).childNodes, function (e) {
                return e.id === "mcepastebin";
              });
              const r = e.shift();
            T.each(e, function (e) {
              t(r, e);
            });
            for (
              let o = n.dom.select("div[id=mcepastebin]", r), a = o.length - 1;
              a >= 0;
              a--
            ) {
              const i = n.dom.create("div");
              r.insertBefore(i, o[a]), t(i, o[a]);
            }
            return r ? r.innerHTML : "";
          })(e);
        },
        getLastRng () {
          return t.get();
        },
        isDefault () {
          return Pe(e, n);
        },
        isDefaultContent (e) {
          return e === n;
        },
      };
    };
    const _e = function (e, t, n) {
      if (
        ((r = e),
        !1 !== P.iOS ||
          r === undefined ||
          typeof r.setData !== "function" ||
          !0 === U())
      )
        return !1;
      try {
        return (
          e.clearData(),
          e.setData("text/html", t),
          e.setData("text/plain", n),
          e.setData(D, t),
          !0
        );
      } catch (o) {
        return !1;
      }
      let r;
    };
    const Te = function (e, t, n, r) {
      _e(e.clipboardData, t.html, t.text)
        ? (e.preventDefault(), r())
        : n(t.html, r);
    };
    const Ce = function (s) {
      return function (e, t) {
        const n = k + e;
          const r = s.dom.create("div", {
            contenteditable: "false",
            "data-mce-bogus": "all",
          });
          const o = s.dom.create("div", { contenteditable: "true" }, n);
        s.dom.setStyles(r, {
          position: "fixed",
          top: "0",
          left: "-3000px",
          width: "1000px",
          overflow: "hidden",
        }),
          r.appendChild(o),
          s.dom.add(s.getBody(), r);
        const a = s.selection.getRng();
        o.focus();
        const i = s.dom.createRng();
        i.selectNodeContents(o),
          s.selection.setRng(i),
          w.setTimeout(function () {
            s.selection.setRng(a), r.parentNode.removeChild(r), t();
          }, 0);
      };
    };
    const De = function (e) {
      return {
        html: e.selection.getContent({ contextual: !0 }),
        text: e.selection.getContent({ format: "text" }),
      };
    };
    const ke = function (e) {
      return (
        !e.selection.isCollapsed() ||
        !!(t = e).dom.getParent(
          t.selection.getStart(),
          "td[data-mce-selected],th[data-mce-selected]",
          t.getBody()
        )
      );
      let t;
    };
    const Se = function (e) {
      let t; let n;
      e.on(
        "cut",
        ((t = e),
        function (e) {
          ke(t) &&
            Te(e, De(t), Ce(t), function () {
              if (P.browser.isChrome()) {
                const e = t.selection.getRng();
                w.setEditorTimeout(
                  t,
                  function () {
                    t.selection.setRng(e), t.execCommand("Delete");
                  },
                  0
                );
              } else t.execCommand("Delete");
            });
        })
      ),
        e.on(
          "copy",
          ((n = e),
          function (e) {
            ke(n) && Te(e, De(n), Ce(n), function () {});
          })
        );
    };
    const Oe = tinymce.util.Tools.resolve("tinymce.dom.RangeUtils");
    const Re = function (e, t) {
      return Oe.getCaretRangeFromPoint(t.clientX, t.clientY, e.getDoc());
    };
    const Ae = function (e, t) {
      e.focus(), e.selection.setRng(t);
    };
    const Ie = function (i, s, u) {
      i.getParam("paste_block_drop", !1) &&
        i.on("dragend dragover draggesture dragdrop drop drag", function (e) {
          e.preventDefault(), e.stopPropagation();
        }),
        N(i) ||
          i.on("drop", function (e) {
            const t = e.dataTransfer;
            t && t.files && t.files.length > 0 && e.preventDefault();
          }),
        i.on("drop", function (e) {
          const t = Re(i, e);
          if (!e.isDefaultPrevented() && !u.get()) {
            let n;
              const r = s.getDataTransferItems(e.dataTransfer);
              const o = s.hasContentType(r, D);
            if (
              (s.hasHtmlOrText(r) &&
                (!(n = r["text/plain"]) || n.indexOf("file://") !== 0)) ||
              !s.pasteImageData(e, t)
            )
              if (t && i.getParam("paste_filter_drop", !0)) {
                let a = r["mce-internal"] || r["text/html"] || r["text/plain"];
                a &&
                  (e.preventDefault(),
                  w.setEditorTimeout(i, function () {
                    i.undoManager.transact(function () {
                      r["mce-internal"] && i.execCommand("Delete"),
                        Ae(i, t),
                        (a = z(a)),
                        r["text/html"] ? s.pasteHtml(a, o) : s.pasteText(a);
                    });
                  }));
              }
          }
        }),
        i.on("dragstart", function (e) {
          u.set(!0);
        }),
        i.on("dragover dragend", function (e) {
          N(i) && !1 === u.get() && (e.preventDefault(), Ae(i, Re(i, e))),
            e.type === "dragend" && u.set(!1);
        });
    };
  function Ee(t, n) {
    t.on("PastePreProcess", function (e) {
      e.content = n(t, e.content, e.internal, e.wordContent);
    });
  }
  function Fe(e, t) {
    if (!q(t)) return t;
    const n = [];
    return (
      T.each(e.schema.getBlockElements(), function (e, t) {
        n.push(t);
      }),
      (t = j(t, [
        [
          new RegExp(
            `(?:<br>&nbsp;[\\s\\r\\n]+|<br>)*(<\\/?(${ 
              n.join("|") 
              })[^>]*>)(?:<br>&nbsp;[\\s\\r\\n]+|<br>)*`,
            "g"
          ),
          "$1",
        ],
      ])),
      (t = j(t, [
        [/<br><br>/g, "<BR><BR>"],
        [/<br>/g, " "],
        [/<BR><BR>/g, "<br>"],
      ]))
    );
  }
  function Me(e, t, n, r) {
    if (r || n) return t;
    let l;
      const o = e.getParam("paste_webkit_styles");
    if (!1 === e.getParam("paste_remove_styles_if_webkit", !0) || o === "all")
      return t;
    if ((o && (l = o.split(/[, ]/)), l)) {
      const c = e.dom;
        const f = e.selection.getNode();
      t = t.replace(/(<[^>]+) style="([^"]*)"([^>]*>)/gi, function (
        e,
        t,
        n,
        r
      ) {
        const o = c.parseStyle(c.decode(n));
          let a = {};
        if (l === "none") return t + r;
        for (let i = 0; i < l.length; i++) {
          let s = o[l[i]];
            let u = c.getStyle(f, l[i], !0);
          /color/.test(l[i]) && ((s = c.toHex(s)), (u = c.toHex(u))),
            u !== s && (a[l[i]] = s);
        }
        return (a = c.serializeStyle(a, "span"))
          ? `${t  } style="${  a  }"${  r}`
          : t + r;
      });
    } else t = t.replace(/(<[^>]+) style="([^"]*)"([^>]*>)/gi, "$1$3");
    return (t = t.replace(
      /(<[^>]+) data-mce-style="([^"]+)"([^>]*>)/gi,
      function (e, t, n, r) {
        return `${t  } style="${  n  }"${  r}`;
      }
    ));
  }
  function Ne(n, e) {
    n.$("a", e)
      .find("font,u")
      .each(function (e, t) {
        n.dom.remove(t, !0);
      });
  }
  const Be = function (e) {
      P.webkit && Ee(e, Me),
        P.ie &&
          (Ee(e, Fe),
          (function r(t, n) {
            t.on("PastePostProcess", function (e) {
              n(t, e.node);
            });
          })(e, Ne));
    };
    const $e = function (n, r) {
      return function (t) {
        t.setActive(r.pasteFormat.get() === "text");
        const e = function (e) {
          return t.setActive(e.state);
        };
        return (
          n.on("PastePlainTextToggle", e),
          function () {
            return n.off("PastePlainTextToggle", e);
          }
        );
      };
    };
  !(function je() {
    c.add("paste", function (e) {
      if (
        !1 ==
        !(
          !/(^|[ ,])powerpaste([, ]|$)/.test(e.getParam("plugins")) ||
          !c.get("powerpaste") ||
          (typeof y.window.console !== "undefined" &&
            y.window.console.log &&
            y.window.console.log(
              "PowerPaste is incompatible with Paste plugin! Remove 'paste' from the 'plugins' option."
            ),
          0)
        )
      ) {
        const t = p(!1);
          const n = p(e.getParam("paste_as_text", !1) ? "text" : "html");
          const r =
            ((u = n),
            (l = we((s = e))),
            s.on("PreInit", function () {
              return ve(s, l, u);
            }),
            {
              pasteFormat: u,
              pasteHtml (e, t) {
                return ie(s, e, t);
              },
              pasteText (e) {
                return se(s, e);
              },
              pasteImageData (e, t) {
                return me(s, e, t);
              },
              getDataTransferItems: ue,
              hasHtmlOrText: ce,
              hasContentType: le,
            });
          const o = Be(e);
        return (
          (i = r),
          (a = e).ui.registry.addToggleButton("pastetext", {
            active: !1,
            icon: "paste-text",
            tooltip: "Paste as text",
            onAction () {
              return a.execCommand("mceTogglePlainTextPaste");
            },
            onSetup: $e(a, i),
          }),
          a.ui.registry.addToggleMenuItem("pastetext", {
            text: "Paste as text",
            icon: "paste-text",
            onAction () {
              return a.execCommand("mceTogglePlainTextPaste");
            },
            onSetup: $e(a, i),
          }),
          f(e, r),
          (function (e) {
            const t = e.plugins.paste;
              const n = e.getParam("paste_preprocess");
            n &&
              e.on("PastePreProcess", function (e) {
                n.call(t, t, e);
              });
            const r = e.getParam("paste_postprocess");
            r &&
              e.on("PastePostProcess", function (e) {
                r.call(t, t, e);
              });
          })(e),
          Se(e),
          Ie(e, r, t),
          { clipboard: r, quirks: o }
        );
      }
      let a; let i; let s; let u; let l;
    });
  })();
})(window);
