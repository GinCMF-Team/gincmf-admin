/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function (m) {
  
  let n;
    let t;
    let e;
    let u;
    const o = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const i = function (n) {
      return function () {
        return n;
      };
    };
    const a = i(!1);
    const c = i(!0);
    const r = function () {
      return l;
    };
    var l =
      ((n = function (n) {
        return n.isNone();
      }),
      {
        fold (n, t) {
          return n();
        },
        is: a,
        isSome: a,
        isNone: c,
        getOr: (e = function (n) {
          return n;
        }),
        getOrThunk: (t = function (n) {
          return n();
        }),
        getOrDie (n) {
          throw new Error(n || "error: getOrDie called on none.");
        },
        getOrNull: i(null),
        getOrUndefined: i(undefined),
        or: e,
        orThunk: t,
        map: r,
        each () {},
        bind: r,
        exists: a,
        forall: c,
        filter: r,
        equals: n,
        equals_: n,
        toArray () {
          return [];
        },
        toString: i("none()"),
      });
    var s = function (e) {
      const n = i(e);
        const t = function () {
          return r;
        };
        const o = function (n) {
          return n(e);
        };
        var r = {
          fold (n, t) {
            return t(e);
          },
          is (n) {
            return e === n;
          },
          isSome: c,
          isNone: a,
          getOr: n,
          getOrThunk: n,
          getOrDie: n,
          getOrNull: n,
          getOrUndefined: n,
          or: t,
          orThunk: t,
          map (n) {
            return s(n(e));
          },
          each (n) {
            n(e);
          },
          bind: o,
          exists: o,
          forall: o,
          filter (n) {
            return n(e) ? r : l;
          },
          toArray () {
            return [e];
          },
          toString () {
            return `some(${  e  })`;
          },
          equals (n) {
            return n.is(e);
          },
          equals_ (n, t) {
            return n.fold(a, function (n) {
              return t(e, n);
            });
          },
        };
      return r;
    };
    const g = {
      some: s,
      none: r,
      from (n) {
        return n === null || n === undefined ? l : s(n);
      },
    };
    const f = function (n, t) {
      return n.indexOf(t) !== -1;
    };
    const d = function (n, t) {
      return (
        f(n.title.toLowerCase(), t) ||
        (function (n, t) {
          for (let e = 0, o = n.length; e < o; e++) {
            if (t(n[e], e)) return !0;
          }
          return !1;
        })(n.keywords, function (n) {
          return f(n.toLowerCase(), t);
        })
      );
    };
    const y = function (n, t, e) {
      for (
        var o = [],
          r = t.toLowerCase(),
          i = e.fold(
            function () {
              return a;
            },
            function (t) {
              return function (n) {
                return t <= n;
              };
            }
          ),
          u = 0;
        u < n.length &&
        ((t.length !== 0 && !d(n[u], r)) ||
          (o.push({
            value: n[u].char,
            text: n[u].title,
            icon: n[u].char,
          }),
          !i(o.length)));
        u++
      );
      return o;
    };
    const h = function (n) {
      let t = n;
      return {
        get () {
          return t;
        },
        set (n) {
          t = n;
        },
      };
    };
    var v = function () {
      return (v =
        Object.assign ||
        function (n) {
          for (var t, e = 1, o = arguments.length; e < o; e++)
            for (const r in (t = arguments[e]))
              Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
          return n;
        }).apply(this, arguments);
    };
    const p = Object.prototype.hasOwnProperty;
    const b =
      ((u = function (n, t) {
        return t;
      }),
      function () {
        for (var n = new Array(arguments.length), t = 0; t < n.length; t++)
          n[t] = arguments[t];
        if (n.length === 0) throw new Error("Can't merge zero objects");
        for (var e = {}, o = 0; o < n.length; o++) {
          const r = n[o];
          for (const i in r) p.call(r, i) && (e[i] = u(e[i], r[i]));
        }
        return e;
      });
    const w = Object.keys;
    const O = Object.hasOwnProperty;
    const C = function (n, t) {
      for (let e = w(n), o = 0, r = e.length; o < r; o++) {
        const i = e[o];
        t(n[i], i);
      }
    };
    const k = function (n, o) {
      const r = {};
      return (
        C(n, function (n, t) {
          const e = o(n, t);
          r[e.k] = e.v;
        }),
        r
      );
    };
    const j = tinymce.util.Tools.resolve("tinymce.Resource");
    const A = tinymce.util.Tools.resolve("tinymce.util.Delay");
    const T = tinymce.util.Tools.resolve("tinymce.util.Promise");
    const _ = "All";
    const D = {
      symbols: "Symbols",
      people: "People",
      animals_and_nature: "Animals and Nature",
      food_and_drink: "Food and Drink",
      activity: "Activity",
      travel_and_places: "Travel and Places",
      objects: "Objects",
      flags: "Flags",
      user: "User Defined",
    };
    const P = function (n, t) {
      return (e = n), (o = t), O.call(e, o) ? n[t] : t;
      let e; let o;
    };
    const x = function (n) {
      let e;
        const t = n.getParam("emoticons_append", {}, "object");
      return (
        (e = function (n) {
          return {keywords: [], category: "user", ...n};
        }),
        k(t, function (n, t) {
          return { k: t, v: e(n, t) };
        })
      );
    };
    const L = function (o, r, n) {
      const u = h(g.none());
        const a = h(g.none());
      o.on("init", function () {
        j.load(n, r).then(
          function (n) {
            let t;
              let r;
              let i;
              const e = x(o);
            (t = b(n, e)),
              (r = {}),
              (i = []),
              C(t, function (n, t) {
                const e = {
                    title: t,
                    keywords: n.keywords,
                    char: n.char,
                    category: P(D, n.category),
                  };
                  const o = r[e.category] !== undefined ? r[e.category] : [];
                (r[e.category] = o.concat([e])), i.push(e);
              }),
              u.set(g.some(r)),
              a.set(g.some(i));
          },
          function (n) {
            m.console.log(`Failed to load emoticons: ${  n}`),
              u.set(g.some({})),
              a.set(g.some([]));
          }
        );
      });
      const e = function () {
          return a.get().getOr([]);
        };
        const i = function () {
          return u.get().isSome() && a.get().isSome();
        };
      return {
        listCategories () {
          return [_].concat(w(u.get().getOr({})));
        },
        hasLoaded: i,
        waitForLoad () {
          return i()
            ? T.resolve(!0)
            : new T(function (n, t) {
                let e = 15;
                  var o = A.setInterval(function () {
                    i()
                      ? (A.clearInterval(o), n(!0))
                      : --e < 0 &&
                        (m.console.log(`Could not load emojis from url: ${  r}`),
                        A.clearInterval(o),
                        t(!1));
                  }, 100);
              });
        },
        listAll: e,
        listCategory (t) {
          return t === _
            ? e()
            : u
                .get()
                .bind(function (n) {
                  return g.from(n[t]);
                })
                .getOr([]);
        },
      };
    };
    const S = "pattern";
    const N = function (r, u) {
      let e;
        let o;
        let i;
        const n = { pattern: "", results: y(u.listAll(), "", g.some(300)) };
        const a = h(_);
        const c =
          ((e = function (n) {
            let t; let e; let o; let r; let i;
            (e = (t = n).getData()),
              (o = a.get()),
              (r = u.listCategory(o)),
              (i = y(r, e[S], o === _ ? g.some(300) : g.none())),
              t.setData({ results: i });
          }),
          (o = 200),
          (i = null),
          {
            cancel () {
              i !== null && (m.clearTimeout(i), (i = null));
            },
            throttle () {
              for (var n = [], t = 0; t < arguments.length; t++)
                n[t] = arguments[t];
              i !== null && m.clearTimeout(i),
                (i = m.setTimeout(function () {
                  e.apply(null, n), (i = null);
                }, o));
            },
          });
        const t = { label: "Search", type: "input", name: S };
        const l = { type: "collection", name: "results" };
        const s = function () {
          return {
            title: "Emoticons",
            size: "normal",
            body: {
              type: "tabpanel",
              tabs: (function (n, t) {
                for (var e = n.length, o = new Array(e), r = 0; r < e; r++) {
                  const i = n[r];
                  o[r] = t(i, r);
                }
                return o;
              })(u.listCategories(), function (n) {
                return { title: n, name: n, items: [t, l] };
              }),
            },
            initialData: n,
            onTabChange (n, t) {
              a.set(t.newTabName), c.throttle(n);
            },
            onChange: c.throttle,
            onAction (n, t) {
              let e; let o;
              t.name === "results" &&
                ((e = r), (o = t.value), e.insertContent(o), n.close());
            },
            buttons: [{ type: "cancel", text: "Close", primary: !0 }],
          };
        };
        const f = r.windowManager.open(s());
      f.focus(S),
        u.hasLoaded() ||
          (f.block("Loading emoticons..."),
          u
            .waitForLoad()
            .then(function () {
              f.redial(s()), c.throttle(f), f.focus(S), f.unblock();
            })
            .catch(function (n) {
              f.redial({
                title: "Emoticons",
                body: {
                  type: "panel",
                  items: [
                    {
                      type: "alertbanner",
                      level: "error",
                      icon: "warning",
                      text: "<p>Could not load emoticons</p>",
                    },
                  ],
                },
                buttons: [{ type: "cancel", text: "Close", primary: !0 }],
                initialData: { pattern: "", results: [] },
              }),
                f.focus(S),
                f.unblock();
            }));
    };
  !(function E() {
    o.add("emoticons", function (n, t) {
      let e;
        let o;
        let r;
        let i;
        let u;
        let a;
        let c;
        const l =
          ((o = t),
          (e = n).getParam(
            "emoticons_database_url",
            `${o  }/js/emojis${  e.suffix  }.js`
          ));
        const s = n.getParam(
          "emoticons_database_id",
          "tinymce.plugins.emoticons",
          "string"
        );
        const f = L(n, l, s);
      (i = f),
        (u = function () {
          return N(r, i);
        }),
        (r = n).ui.registry.addButton("emoticons", {
          tooltip: "Emoticons",
          icon: "emoji",
          onAction: u,
        }),
        r.ui.registry.addMenuItem("emoticons", {
          text: "Emoticons...",
          icon: "emoji",
          onAction: u,
        }),
        (c = f),
        (a = n).ui.registry.addAutocompleter("emoticons", {
          ch: ":",
          columns: "auto",
          minChars: 2,
          fetch (t, e) {
            return c.waitForLoad().then(function () {
              const n = c.listAll();
              return y(n, t, g.some(e));
            });
          },
          onAction (n, t, e) {
            a.selection.setRng(t), a.insertContent(e), n.hide();
          },
        });
    });
  })();
})(window);
