/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  const t = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const l = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const u = function (t) {
      return t.getParam("noneditable_noneditable_class", "mceNonEditable");
    };
    const f = function (n) {
      return function (t) {
        return (` ${  t.attr("class")  } `).indexOf(n) !== -1;
      };
    };
    const s = function (i, o, c) {
      return function (t) {
        const n = arguments;
          const e = n[n.length - 2];
          const r = e > 0 ? o.charAt(e - 1) : "";
        if (r === '"') return t;
        if (r === ">") {
          const a = o.lastIndexOf("<", e);
          if (a !== -1)
            if (o.substring(a, e).indexOf('contenteditable="false"') !== -1)
              return t;
        }
        return (
          `<span class="${ 
          c 
          }" data-mce-content="${ 
          i.dom.encode(n[0]) 
          }">${ 
          i.dom.encode(typeof n[1] === "string" ? n[1] : n[0]) 
          }</span>`
        );
      };
    };
    const n = function (n) {
      let t;
        const r = "contenteditable";
        const e =
          ` ${ 
          l.trim(n.getParam("noneditable_editable_class", "mceEditable")) 
          } `;
        const a = ` ${  l.trim(u(n))  } `;
        const i = f(e);
        const o = f(a);
        const c =
          (t = n.getParam("noneditable_regexp", [])) && t.constructor === RegExp
            ? [t]
            : t;
      n.on("PreInit", function () {
        c.length > 0 &&
          n.on("BeforeSetContent", function (t) {
            !(function (t, n, e) {
              let r = n.length;
                let a = e.content;
              if (e.format !== "raw") {
                for (; r--; ) a = a.replace(n[r], s(t, a, u(t)));
                e.content = a;
              }
            })(n, c, t);
          }),
          n.parser.addAttributeFilter("class", function (t) {
            for (var n, e = t.length; e--; )
              (n = t[e]), i(n) ? n.attr(r, "true") : o(n) && n.attr(r, "false");
          }),
          n.serializer.addAttributeFilter(r, function (t) {
            for (var n, e = t.length; e--; )
              (n = t[e]),
                (i(n) || o(n)) &&
                  (c.length > 0 && n.attr("data-mce-content")
                    ? ((n.name = "#text"),
                      (n.type = 3),
                      (n.raw = !0),
                      (n.value = n.attr("data-mce-content")))
                    : n.attr(r, null));
          });
      });
    };
  !(function e() {
    t.add("noneditable", function (t) {
      n(t);
    });
  })();
})();
