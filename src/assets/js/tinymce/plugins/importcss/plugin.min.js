/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  let n;
    const t = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const y = tinymce.util.Tools.resolve("tinymce.dom.DOMUtils");
    const f = tinymce.util.Tools.resolve("tinymce.EditorManager");
    const m = tinymce.util.Tools.resolve("tinymce.Env");
    const h = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const d = function (t) {
      return t.getParam("importcss_selector_converter");
    };
    const i =
      ((n = "array"),
      function (t) {
        return (
          (r = typeof (e = t)),
          (e === null
            ? "null"
            : r == "object" &&
              (Array.prototype.isPrototypeOf(e) ||
                (e.constructor && e.constructor.name === "Array"))
            ? "array"
            : r == "object" &&
              (String.prototype.isPrototypeOf(e) ||
                (e.constructor && e.constructor.name === "String"))
            ? "string"
            : r) === n
        );
        let e; let r;
      });
    const o = Array.prototype.push;
    const l = function (t, e) {
      return (function (t) {
        for (var e = [], r = 0, n = t.length; r < n; ++r) {
          if (!i(t[r]))
            throw new Error(
              `Arr.flatten item ${  r  } was not an array, input: ${  t}`
            );
          o.apply(e, t[r]);
        }
        return e;
      })(
        (function (t, e) {
          for (var r = t.length, n = new Array(r), i = 0; i < r; i++) {
            const o = t[i];
            n[i] = e(o, i);
          }
          return n;
        })(t, e)
      );
    };
    const p = function (e) {
      return typeof e === "string"
        ? function (t) {
            return t.indexOf(e) !== -1;
          }
        : e instanceof RegExp
        ? function (t) {
            return e.test(t);
          }
        : e;
    };
    const _ = function (s, t, a) {
      const u = [];
        const r = {};
      function l(t, e) {
        let r;
          let n;
          let i;
          let o = t.href;
        if (
          ((n = o),
          (i = m.cacheSuffix),
          typeof n === "string" &&
            (n = n.replace(`?${  i}`, "").replace(`&${  i}`, "")),
          (o = n) &&
            a(o, e) &&
            !(function (t, e) {
              let r;
                const n = !1 !== (r = t.getParam("skin")) && (r || "oxide");
              if (n) {
                const i = t.getParam("skin_url");
                  const o = i
                    ? t.documentBaseURI.toAbsolute(i)
                    : `${f.baseURL  }/skins/ui/${  n}`;
                  const c = `${f.baseURL  }/skins/content/`;
                return (
                  e ===
                    `${o  }/content${  t.inline ? ".inline" : ""  }.min.css` ||
                  e.indexOf(c) !== -1
                );
              }
              return !1;
            })(s, o))
        ) {
          h.each(t.imports, function (t) {
            l(t, !0);
          });
          try {
            r = t.cssRules || t.rules;
          } catch (c) {}
          h.each(r, function (t) {
            t.styleSheet
              ? l(t.styleSheet, !0)
              : t.selectorText &&
                h.each(t.selectorText.split(","), function (t) {
                  u.push(h.trim(t));
                });
          });
        }
      }
      h.each(s.contentCSS, function (t) {
        r[t] = !0;
      }),
        (a =
          a ||
          function (t, e) {
            return e || r[t];
          });
      try {
        h.each(t.styleSheets, function (t) {
          l(t);
        });
      } catch (e) {}
      return u;
    };
    const x = function (t, e) {
      let r;
        const n = /^(?:([a-z0-9\-_]+))?(\.[a-z0-9_\-\.]+)$/i.exec(e);
      if (n) {
        const i = n[1];
          const o = n[2].substr(1).split(".").join(" ");
          const c = h.makeMap("a,img");
        return (
          n[1]
            ? ((r = { title: e }),
              t.schema.getTextBlockElements()[i]
                ? (r.block = i)
                : t.schema.getBlockElements()[i] || c[i.toLowerCase()]
                ? (r.selector = i)
                : (r.inline = i))
            : n[2] && (r = { inline: "span", title: e.substr(1), classes: o }),
          !1 !== t.getParam("importcss_merge_classes")
            ? (r.classes = o)
            : (r.attributes = { class: o }),
          r
        );
      }
    };
    const P = function (t, e) {
      return e === null || !1 !== t.getParam("importcss_exclusive");
    };
    const r = function (g) {
      g.on("init", function (t) {
        let e;
          let r;
          let n;
          let i;
          const o =
            ((e = []),
            (r = []),
            (n = {}),
            {
              addItemToGroup (t, e) {
                n[t] ? n[t].push(e) : (r.push(t), (n[t] = [e]));
              },
              addItem (t) {
                e.push(t);
              },
              toFormats () {
                return l(r, function (t) {
                  const e = n[t];
                  return e.length === 0 ? [] : [{ title: t, items: e }];
                }).concat(e);
              },
            });
          const v = {};
          const c = p(g.getParam("importcss_selector_filter"));
          const s =
            ((i = g.getParam("importcss_groups")),
            h.map(i, function (t) {
              return h.extend({}, t, {
                original: t,
                selectors: {},
                filter: p(t.filter),
                item: { text: t.title, menu: [] },
              });
            }));
          const a = function (t, e) {
            if (
              ((f = t), (p = v), !(P(g, (m = e)) ? f in p : f in m.selectors))
            ) {
              (a = t),
                (l = v),
                P(g, (u = e)) ? (l[a] = !0) : (u.selectors[a] = !0);
              const r =
                ((o = (i = g).plugins.importcss),
                (c = t),
                ((s = e) && s.selector_converter
                  ? s.selector_converter
                  : d(i)
                  ? d(i)
                  : function () {
                      return x(i, c);
                    }
                ).call(o, c, s));
              if (r) {
                const n = r.name || y.DOM.uniqueId();
                return (
                  g.formatter.register(n, r),
                  h.extend({}, { title: r.title, format: n })
                );
              }
            }
            let i; let o; let c; let s; let a; let u; let l; let f; let m; let p;
            return null;
          };
        h.each(
          _(g, g.getDoc(), p(g.getParam("importcss_file_filter"))),
          function (r) {
            if (r.indexOf(".mce-") === -1 && (!c || c(r))) {
              const t =
                ((n = s),
                (i = r),
                h.grep(n, function (t) {
                  return !t.filter || t.filter(i);
                }));
              if (t.length > 0)
                h.each(t, function (t) {
                  const e = a(r, t);
                  e && o.addItemToGroup(t.title, e);
                });
              else {
                const e = a(r, null);
                e && o.addItem(e);
              }
            }
            let n; let i;
          }
        );
        const u = o.toFormats();
        g.fire("addStyleModifications", {
          items: u,
          replace: !g.getParam("importcss_append"),
        });
      });
    };
  !(function e() {
    t.add("importcss", function (t) {
      return (
        r(t),
        (e = t),
        {
          convertSelectorToFormat (t) {
            return x(e, t);
          },
        }
      );
      let e;
    });
  })();
})();
