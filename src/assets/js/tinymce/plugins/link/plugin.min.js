/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function (i) {
  
  let n;
    let t;
    let e;
    let r;
    const o = tinymce.util.Tools.resolve("tinymce.PluginManager");
    const u = tinymce.util.Tools.resolve("tinymce.util.VK");
    const a = function (r) {
      return function (t) {
        return (
          (e = typeof (n = t)),
          (n === null
            ? "null"
            : e == "object" &&
              (Array.prototype.isPrototypeOf(n) ||
                (n.constructor && n.constructor.name === "Array"))
            ? "array"
            : e == "object" &&
              (String.prototype.isPrototypeOf(n) ||
                (n.constructor && n.constructor.name === "String"))
            ? "string"
            : e) === r
        );
        let n; let e;
      };
    };
    const l = function (n) {
      return function (t) {
        return typeof t === n;
      };
    };
    const c = a("string");
    const f = a("array");
    const s = function (t) {
      return n === t;
    };
    const m = l("boolean");
    const g = l("function");
    const d = function (t) {
      const n = t.getParam("link_assume_external_targets", !1);
      return m(n) && n ? 1 : !c(n) || (n !== "http" && n !== "https") ? 0 : n;
    };
    const h = function (t) {
      return t.getParam("default_link_target");
    };
    const v = function (t) {
      return t.getParam("target_list", !0);
    };
    const p = function (t) {
      return t.getParam("rel_list", [], "array");
    };
    const y = function (t) {
      return t.getParam("allow_unsafe_link_target", !1, "boolean");
    };
    const k = function () {};
    const x = function (t) {
      return function () {
        return t;
      };
    };
    const b = x(!1);
    const O = x(!(n = null));
    const w = function () {
      return C;
    };
    var C =
      ((t = function (t) {
        return t.isNone();
      }),
      {
        fold (t, n) {
          return t();
        },
        is: b,
        isSome: b,
        isNone: O,
        getOr: (r = function (t) {
          return t;
        }),
        getOrThunk: (e = function (t) {
          return t();
        }),
        getOrDie (t) {
          throw new Error(t || "error: getOrDie called on none.");
        },
        getOrNull: x(null),
        getOrUndefined: x(undefined),
        or: r,
        orThunk: e,
        map: w,
        each: k,
        bind: w,
        exists: b,
        forall: O,
        filter: w,
        equals: t,
        equals_: t,
        toArray () {
          return [];
        },
        toString: x("none()"),
      });
    var A = function (e) {
      const t = x(e);
        const n = function () {
          return o;
        };
        const r = function (t) {
          return t(e);
        };
        var o = {
          fold (t, n) {
            return n(e);
          },
          is (t) {
            return e === t;
          },
          isSome: O,
          isNone: b,
          getOr: t,
          getOrThunk: t,
          getOrDie: t,
          getOrNull: t,
          getOrUndefined: t,
          or: n,
          orThunk: n,
          map (t) {
            return A(t(e));
          },
          each (t) {
            t(e);
          },
          bind: r,
          exists: r,
          forall: r,
          filter (t) {
            return t(e) ? o : C;
          },
          toArray () {
            return [e];
          },
          toString () {
            return `some(${  e  })`;
          },
          equals (t) {
            return t.is(e);
          },
          equals_ (t, n) {
            return t.fold(b, function (t) {
              return n(e, t);
            });
          },
        };
      return o;
    };
    const N = {
      some: A,
      none: w,
      from (t) {
        return t === null || t === undefined ? C : A(t);
      },
    };
    const P = Array.prototype.indexOf;
    const _ = Array.prototype.push;
    const S = function (t, n) {
      return (e = t), (r = n), P.call(e, r) > -1;
      let e; let r;
    };
    const T = function (t) {
      for (var n = [], e = 0, r = t.length; e < r; ++e) {
        if (!f(t[e]))
          throw new Error(
            `Arr.flatten item ${  e  } was not an array, input: ${  t}`
          );
        _.apply(n, t[e]);
      }
      return n;
    };
    const D = function (t, n) {
      return T(
        (function (t, n) {
          for (var e = t.length, r = new Array(e), o = 0; o < e; o++) {
            const i = t[o];
            r[o] = n(i, o);
          }
          return r;
        })(t, n)
      );
    };
    const M = function (t, n) {
      for (let e = 0; e < t.length; e++) {
        const r = n(t[e], e);
        if (r.isSome()) return r;
      }
      return N.none();
    };
    const L = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const E = function (t) {
      return c(t.value) ? t.value : "";
    };
    const R = function (e) {
      return (
        void 0 === e && (e = E),
        function (t) {
          return N.from(t).map(function (t) {
            return (
              (n = t),
              (r = e),
              (o = []),
              L.each(n, function (t) {
                const n = c(t.text) ? t.text : c(t.title) ? t.title : "";
                if (t.menu === undefined) {
                  const e = r(t);
                  o.push({ text: n, value: e });
                }
              }),
              o
            );
            let n; let r; let o;
          });
        }
      );
    };
    const U = {
      sanitize (t) {
        return R(E)(t);
      },
      sanitizeWith: R,
      createUi (n, e) {
        return function (t) {
          return { name: n, type: "selectbox", label: e, items: t };
        };
      },
      getValue: E,
    };
    var q = function () {
      return (q =
        Object.assign ||
        function (t) {
          for (var n, e = 1, r = arguments.length; e < r; e++)
            for (const o in (n = arguments[e]))
              Object.prototype.hasOwnProperty.call(n, o) && (t[o] = n[o]);
          return t;
        }).apply(this, arguments);
    };
    const K = Object.keys;
    const z = function (t, e, r, o) {
      return (
        (function (t, n) {
          for (let e = K(t), r = 0, o = e.length; r < o; r++) {
            const i = e[r];
            n(t[i], i);
          }
        })(t, function (t, n) {
          (e(t, n) ? r : o)(t, n);
        }),
        {}
      );
    };
    const I = function (t, n) {
      let e;
        const r = {};
      return (
        z(
          t,
          n,
          ((e = r),
          function (t, n) {
            e[n] = t;
          }),
          k
        ),
        r
      );
    };
    const j = function (t) {
      return !(
        !/(^|[ ,])rtc([, ]|$)/.test(t.getParam("plugins", "", "string")) ||
        !o.get("rtc")
      );
    };
    const B = function (t) {
      return /^\w+:/i.test(t);
    };
    const V = function (t) {
      const n = t.getAttribute("data-mce-href");
      return n || t.getAttribute("href");
    };
    const F = function (t, n) {
      let e;
        let r;
        const o = ["noopener"];
        const i = t ? t.split(/\s+/) : [];
        const u = function (t) {
          return t.filter(function (t) {
            return L.inArray(o, t) === -1;
          });
        };
        const a = n ? ((e = u((e = i))).length > 0 ? e.concat(o) : o) : u(i);
      return a.length > 0 ? ((r = a), L.trim(r.sort().join(" "))) : "";
    };
    const W = function (t, n) {
      return (
        (n = n || t.selection.getNode()),
        X(n) ? t.dom.select("a[href]", n)[0] : t.dom.getParent(n, "a[href]")
      );
    };
    const $ = function (t, n) {
      const e = n
        ? n.innerText || n.textContent
        : t.getContent({ format: "text" });
      return e.replace(/\uFEFF/g, "");
    };
    const H = function (t) {
      return t && t.nodeName === "A" && !!V(t);
    };
    const G = function (t) {
      return L.grep(t, H).length > 0;
    };
    const J = function (t) {
      return !(
        /</.test(t) &&
        (!/^<a [^>]+>[^<]+<\/a>$/.test(t) || t.indexOf("href=") === -1)
      );
    };
    var X = function (t) {
      return t && t.nodeName === "FIGURE" && /\bimage\b/i.test(t.className);
    };
    const Q = function (t) {
      return (
        (n = ["title", "rel", "class", "target"]),
        (e = function (n, e) {
          return (
            t[e].each(function (t) {
              n[e] = t.length > 0 ? t : null;
            }),
            n
          );
        }),
        (r = { href: t.href }),
        (function (t, n) {
          for (let e = 0, r = t.length; e < r; e++) n(t[e], e);
        })(n, function (t) {
          r = e(r, t);
        }),
        r
      );
      let n; let e; let r;
    };
    const Y = function (t, n) {
      let e;
        let r;
        const o = { ...n};
      if (!(p(t).length > 0) && !1 === y(t)) {
        const i = F(o.rel, o.target === "_blank");
        o.rel = i || null;
      }
      return (
        N.from(o.target).isNone() && !1 === v(t) && (o.target = h(t)),
        (o.href =
          ((e = o.href),
          ((r = d(t)) !== "http" && r !== "https") || B(e)
            ? e
            : `${r  }://${  e}`)),
        o
      );
    };
    const Z = function (l, c, f) {
      const s = l.selection.getNode();
        const m = W(l, s);
        const g = Y(l, Q(f));
      l.undoManager.transact(function () {
        let n; let t; let e; let r; let o; let i; let u; let a;
        f.href === c.href && c.attach(),
          m
            ? (l.focus(),
              (o = l),
              (i = m),
              (u = f.text),
              (a = g),
              u.each(function (t) {
                i.hasOwnProperty("innerText")
                  ? (i.innerText = t)
                  : (i.textContent = t);
              }),
              o.dom.setAttribs(i, a),
              o.selection.select(i))
            : ((n = l),
              (t = s),
              (e = f.text),
              (r = g),
              X(t)
                ? rt(n, t, r)
                : e.fold(
                    function () {
                      n.execCommand("mceInsertLink", !1, r);
                    },
                    function (t) {
                      n.insertContent(
                        n.dom.createHTML("a", r, n.dom.encode(t))
                      );
                    }
                  ));
      });
    };
    const tt = function (t, n, e) {
      let r; let o; let i; let u; let a; let l; let c;
      j(t)
        ? t.execCommand(
            "createlink",
            !1,
            ((o = (r = e).class),
            (i = r.href),
            (u = r.rel),
            (a = r.target),
            (l = r.text),
            (c = r.title),
            I(
              {
                class: o.getOrNull(),
                href: i,
                rel: u.getOrNull(),
                target: a.getOrNull(),
                text: l.getOrNull(),
                title: c.getOrNull(),
              },
              function (t, n) {
                return !1 === s(t);
              }
            ))
          )
        : Z(t, n, e);
    };
    const nt = function (t) {
      let e;
      j(t)
        ? t.execCommand("unlink")
        : (e = t).undoManager.transact(function () {
            const t = e.selection.getNode();
            if (X(t)) et(e, t);
            else {
              const n = e.dom.getParent(t, "a[href]", e.getBody());
              n && e.dom.remove(n, !0);
            }
            e.focus();
          });
    };
    var et = function (t, n) {
      const e = t.dom.select("img", n)[0];
      if (e) {
        const r = t.dom.getParents(e, "a[href]", n)[0];
        r && (r.parentNode.insertBefore(e, r), t.dom.remove(r));
      }
    };
    var rt = function (t, n, e) {
      const r = t.dom.select("img", n)[0];
      if (r) {
        const o = t.dom.create("a", e);
        r.parentNode.insertBefore(o, r), o.appendChild(r);
      }
    };
    const ot = function (n, t, e, r) {
      let o;
        const i = r[t];
        const u = n.length > 0;
      return i !== undefined
        ? ((o = i),
          M(e, function (t) {
            return N.some(t).filter(function (t) {
              return t.value === o;
            });
          }).map(function (t) {
            return {
              url: {
                value: t.value,
                meta: { text: u ? n : t.text, attach: k },
              },
              text: u ? n : t.text,
            };
          }))
        : N.none();
    };
    const it = function (t, i) {
      let n;
        let e;
        const u =
          ((n = t.text),
          (e = n),
          {
            get () {
              return e;
            },
            set (t) {
              e = t;
            },
          });
        const r = function (t, n) {
          let e;
            let r;
            const o =
              ((e = i),
              ((r = n.name) === "link"
                ? e.catalogs.link
                : r === "anchor"
                ? e.catalogs.anchor
                : N.none()
              ).getOr([]));
          return ot(u.get(), n.name, o, t);
        };
      return {
        onChange (t, n) {
          return n.name === "url"
            ? (function (t) {
                if (u.get().length <= 0) {
                  const n =
                      t.url.meta.text !== undefined
                        ? t.url.meta.text
                        : t.url.value;
                    const e = t.url.meta.title !== undefined ? t.url.meta.title : "";
                  return N.some({ text: n, title: e });
                }
                return N.none();
              })(t())
            : S(["anchor", "link"], n.name)
            ? r(t(), n)
            : (n.name === "text" && u.set(t().text), N.none());
        },
      };
    };
    const ut = tinymce.util.Tools.resolve("tinymce.util.Delay");
    const at = tinymce.util.Tools.resolve("tinymce.util.Promise");
    const lt = function (t) {
      const n = t.href;
      return n.indexOf("@") > 0 &&
        n.indexOf("/") === -1 &&
        n.indexOf("mailto:") === -1
        ? N.some({
            message:
              "The URL you entered seems to be an email address. Do you want to add the required mailto: prefix?",
            preprocess (t) {
              return {...t, href: `mailto:${  n}`};
            },
          })
        : N.none();
    };
    const ct = function (u, a) {
      return M(
        [
          lt,
          ((e = d(u)),
          (r = u.getParam("link_default_protocol", "http", "string")),
          function (t) {
            const n = t.href;
            return (e === 1 && !B(n)) ||
              (e === 0 && /^\s*www[\.|\d\.]/i.test(n))
              ? N.some({
                  message:
                    `The URL you entered seems to be an external link. Do you want to add the required ${ 
                    r 
                    }:// prefix?`,
                  preprocess (t) {
                    return {...t, href: `${r  }://${  n}`};
                  },
                })
              : N.none();
          }),
        ],
        function (t) {
          return t(a);
        }
      ).fold(
        function () {
          return at.resolve(a);
        },
        function (i) {
          return new at(function (n) {
            let e; let t; let r; let o;
            (e = u),
              (t = i.message),
              (r = function (t) {
                n(t ? i.preprocess(a) : a);
              }),
              (o = e.selection.getRng()),
              ut.setEditorTimeout(e, function () {
                e.windowManager.confirm(t, function (t) {
                  e.selection.setRng(o), r(t);
                });
              });
          });
        }
      );
      let e; let r;
    };
    const ft = function (t) {
      const n = t.dom.select("a:not([href])");
        const e = D(n, function (t) {
          const n = t.name || t.id;
          return n ? [{ text: n, value: `#${  n}` }] : [];
        });
      return e.length > 0
        ? N.some([{ text: "None", value: "" }].concat(e))
        : N.none();
    };
    const st = function (t) {
      const n = t.getParam("link_class_list", [], "array");
      return n.length > 0 ? U.sanitize(n) : N.none();
    };
    const mt = tinymce.util.Tools.resolve("tinymce.util.XHR");
    const gt = function (n) {
      const e = function (t) {
          return n.convertURL(t.value || t.url, "href");
        };
        const t = n.getParam("link_list");
      return new at(function (n) {
        c(t)
          ? mt.send({
              url: t,
              success (t) {
                return n(
                  (function (t) {
                    try {
                      return N.some(JSON.parse(t));
                    } catch (n) {
                      return N.none();
                    }
                  })(t)
                );
              },
              error (t) {
                return n(N.none());
              },
            })
          : g(t)
          ? t(function (t) {
              return n(N.some(t));
            })
          : n(N.from(t));
      }).then(function (t) {
        return t.bind(U.sanitizeWith(e)).map(function (t) {
          return t.length > 0 ? [{ text: "None", value: "" }].concat(t) : t;
        });
      });
    };
    const dt = function (t, n) {
      const e = p(t);
      if (e.length > 0) {
        const r = n.is("_blank");
        return (!1 === y(t)
          ? U.sanitizeWith(function (t) {
              return F(U.getValue(t), r);
            })
          : U.sanitize)(e);
      }
      return N.none();
    };
    const ht = [
      { text: "Current window", value: "" },
      { text: "New window", value: "_blank" },
    ];
    const vt = function (t) {
      const n = v(t);
      return f(n)
        ? U.sanitize(n).orThunk(function () {
            return N.some(ht);
          })
        : !1 === n
        ? N.none()
        : N.some(ht);
    };
    const pt = function (t, n, e) {
      const r = t.getAttrib(n, e);
      return r !== null && r.length > 0 ? N.some(r) : N.none();
    };
    const yt = function (f, s) {
      return gt(f).then(function (t) {
        let n;
          let e;
          let r;
          let o;
          let i;
          let u;
          let a;
          let l;
          const c =
            ((e = s),
            (r = (n = f).dom),
            (o = J(n.selection.getContent())
              ? N.some($(n.selection, e))
              : N.none()),
            (i = e ? N.some(r.getAttrib(e, "href")) : N.none()),
            (u = e ? N.from(r.getAttrib(e, "target")) : N.none()),
            (a = pt(r, e, "rel")),
            (l = pt(r, e, "class")),
            {
              url: i,
              text: o,
              title: pt(r, e, "title"),
              target: u,
              rel: a,
              linkClass: l,
            });
        return {
          anchor: c,
          catalogs: {
            targets: vt(f),
            rels: dt(f, c.target),
            classes: st(f),
            anchor: ft(f),
            link: t,
          },
          optNode: N.from(s),
          flags: { titleEnabled: f.getParam("link_title", !0, "boolean") },
        };
      });
    };
    const kt = function (d) {
      let t; let n;
      ((n = W((t = d))), yt(t, n))
        .then(function (t) {
          let i; let u; let n; let e; let r; let o; let a; let l; let c; let f; let s; let m; let g;
          return (
            (e = function (t) {
              const e = t.getData();
              if (!e.url.value) return nt(i), void t.close();
              const n = function (n) {
                  return N.from(e[n]).filter(function (t) {
                    return !u.anchor[n].is(t);
                  });
                };
                const r = {
                  href: e.url.value,
                  text: n("text"),
                  target: n("target"),
                  rel: n("rel"),
                  class: n("linkClass"),
                  title: n("title"),
                };
                const o = {
                  href: e.url.value,
                  attach:
                    e.url.meta !== undefined && e.url.meta.attach
                      ? e.url.meta.attach
                      : function () {},
                };
              ct(i, r).then(function (t) {
                tt(i, o, t);
              }),
                t.close();
            }),
            (r = i = d),
            (l = (n = u = t).anchor.text
              .map(function () {
                return {
                  name: "text",
                  type: "input",
                  label: "Text to display",
                };
              })
              .toArray()),
            (c = n.flags.titleEnabled
              ? [{ name: "title", type: "input", label: "Title" }]
              : []),
            (f = N.from(h(r))),
            (a = f),
            (s = {
              url: {
                value: (o = n).anchor.url.getOr(""),
                meta: {
                  attach () {},
                  text: o.anchor.url.fold(
                    function () {
                      return "";
                    },
                    function () {
                      return o.anchor.text.getOr("");
                    }
                  ),
                  original: { value: o.anchor.url.getOr("") },
                },
              },
              text: o.anchor.text.getOr(""),
              title: o.anchor.title.getOr(""),
              anchor: o.anchor.url.getOr(""),
              link: o.anchor.url.getOr(""),
              rel: o.anchor.rel.getOr(""),
              target: o.anchor.target.or(a).getOr(""),
              linkClass: o.anchor.linkClass.getOr(""),
            }),
            (m = it(s, n)),
            (g = n.catalogs),
            {
              title: "Insert/Edit Link",
              size: "normal",
              body: {
                type: "panel",
                items: T([
                  [
                    {
                      name: "url",
                      type: "urlinput",
                      filetype: "file",
                      label: "URL",
                    },
                  ],
                  l,
                  c,
                  (function (t) {
                    for (
                      var n = [],
                        e = function (t) {
                          n.push(t);
                        },
                        r = 0;
                      r < t.length;
                      r++
                    )
                      t[r].each(e);
                    return n;
                  })([
                    g.anchor.map(U.createUi("anchor", "Anchors")),
                    g.rels.map(U.createUi("rel", "Rel")),
                    g.targets.map(U.createUi("target", "Open link in...")),
                    g.link.map(U.createUi("link", "Link list")),
                    g.classes.map(U.createUi("linkClass", "Class")),
                  ]),
                ]),
              },
              buttons: [
                { type: "cancel", name: "cancel", text: "Cancel" },
                { type: "submit", name: "save", text: "Save", primary: !0 },
              ],
              initialData: s,
              onChange (n, t) {
                const e = t.name;
                m.onChange(n.getData, { name: e }).each(function (t) {
                  n.setData(t);
                });
              },
              onSubmit: e,
            }
          );
        })
        .then(function (t) {
          d.windowManager.open(t);
        });
    };
    const xt = function (t) {
      const n = i.document.createElement("a");
      (n.target = "_blank"), (n.href = t), (n.rel = "noreferrer noopener");
      let e;
        let r;
        const o = i.document.createEvent("MouseEvents");
      o.initMouseEvent(
        "click",
        !0,
        !0,
        i.window,
        0,
        0,
        0,
        0,
        0,
        !1,
        !1,
        !1,
        !1,
        0,
        null
      ),
        (e = n),
        (r = o),
        i.document.body.appendChild(e),
        e.dispatchEvent(r),
        i.document.body.removeChild(e);
    };
    const bt = function (t, n) {
      return t.dom.getParent(n, "a[href]");
    };
    const Ot = function (t) {
      return bt(t, t.selection.getStart());
    };
    const wt = function (t, n) {
      if (n) {
        const e = V(n);
        if (/^#/.test(e)) {
          const r = t.$(e);
          r.length && t.selection.scrollIntoView(r[0], !0);
        } else xt(n.href);
      }
    };
    const Ct = function (t) {
      return function () {
        kt(t);
      };
    };
    const At = function (t) {
      return function () {
        wt(t, Ot(t));
      };
    };
    const Nt = function (r) {
      r.on("click", function (t) {
        const n = bt(r, t.target);
        n && u.metaKeyPressed(t) && (t.preventDefault(), wt(r, n));
      }),
        r.on("keydown", function (t) {
          let n;
            const e = Ot(r);
          e &&
            t.keyCode === 13 &&
            !0 === (n = t).altKey &&
            !1 === n.shiftKey &&
            !1 === n.ctrlKey &&
            !1 === n.metaKey &&
            (t.preventDefault(), wt(r, e));
        });
    };
    const Pt = function (e) {
      return function (n) {
        const t = function (t) {
          return n.setActive(!e.mode.isReadOnly() && !!W(e, t.element));
        };
        return (
          e.on("NodeChange", t),
          function () {
            return e.off("NodeChange", t);
          }
        );
      };
    };
    const _t = function (r) {
      return function (n) {
        const t = r.dom.getParents(r.selection.getStart());
        n.setDisabled(!G(t));
        const e = function (t) {
          return n.setDisabled(!G(t.parents));
        };
        return (
          r.on("NodeChange", e),
          function () {
            return r.off("NodeChange", e);
          }
        );
      };
    };
  !(function St() {
    o.add("link", function (t) {
      let n; let e; let r; let i; let o; let u; let a;
      (n = t).ui.registry.addToggleButton("link", {
        icon: "link",
        tooltip: "Insert/edit link",
        onAction: Ct(n),
        onSetup: Pt(n),
      }),
        n.ui.registry.addButton("openlink", {
          icon: "new-tab",
          tooltip: "Open link",
          onAction: At(n),
          onSetup: _t(n),
        }),
        n.ui.registry.addButton("unlink", {
          icon: "unlink",
          tooltip: "Remove link",
          onAction () {
            return nt(n);
          },
          onSetup: _t(n),
        }),
        (e = t).ui.registry.addMenuItem("openlink", {
          text: "Open link",
          icon: "new-tab",
          onAction: At(e),
          onSetup: _t(e),
        }),
        e.ui.registry.addMenuItem("link", {
          icon: "link",
          text: "Link...",
          shortcut: "Meta+K",
          onAction: Ct(e),
        }),
        e.ui.registry.addMenuItem("unlink", {
          icon: "unlink",
          text: "Remove link",
          onAction () {
            return nt(e);
          },
          onSetup: _t(e),
        }),
        (r = t).ui.registry.addContextMenu("link", {
          update (t) {
            return G(r.dom.getParents(t, "a"))
              ? "link unlink openlink"
              : "link";
          },
        }),
        (o = function (t) {
          const n = i.selection.getNode();
          return t.setDisabled(!W(i, n)), function () {};
        }),
        (i = t).ui.registry.addContextForm("quicklink", {
          launch: {
            type: "contextformtogglebutton",
            icon: "link",
            tooltip: "Link",
            onSetup: Pt(i),
          },
          label: "Link",
          predicate (t) {
            return (
              !!W(i, t) && i.getParam("link_context_toolbar", !1, "boolean")
            );
          },
          initValue () {
            const t = W(i);
            return t ? V(t) : "";
          },
          commands: [
            {
              type: "contextformtogglebutton",
              icon: "link",
              tooltip: "Link",
              primary: !0,
              onSetup (t) {
                const n = i.selection.getNode();
                return t.setActive(!!W(i, n)), Pt(i)(t);
              },
              onAction (t) {
                const n = W(i);
                  const e = t.getValue();
                if (n)
                  i.undoManager.transact(function () {
                    i.dom.setAttrib(n, "href", e),
                      i.selection.collapse(!1),
                      t.hide();
                  });
                else {
                  const r = { href: e, attach () {} };
                    const o = J(i.selection.getContent())
                      ? N.some($(i.selection, n))
                          .filter(function (t) {
                            return t.length > 0;
                          })
                          .or(N.from(e))
                      : N.none();
                  tt(i, r, {
                    href: e,
                    text: o,
                    title: N.none(),
                    rel: N.none(),
                    target: N.none(),
                    class: N.none(),
                  }),
                    t.hide();
                }
              },
            },
            {
              type: "contextformbutton",
              icon: "unlink",
              tooltip: "Remove link",
              onSetup: o,
              onAction (t) {
                nt(i), t.hide();
              },
            },
            {
              type: "contextformbutton",
              icon: "new-tab",
              tooltip: "Open link",
              onSetup: o,
              onAction (t) {
                At(i)(), t.hide();
              },
            },
          ],
        }),
        Nt(t),
        (u = t).addCommand("mceLink", function () {
          u.getParam("link_quicklink", !1, "boolean")
            ? u.fire("contexttoolbar-show", { toolbarKey: "quicklink" })
            : Ct(u)();
        }),
        (a = t).addShortcut("Meta+K", "", function () {
          a.execCommand("mceLink");
        });
    });
  })();
})(window);
