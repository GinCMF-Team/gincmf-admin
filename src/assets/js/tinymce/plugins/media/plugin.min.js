/**
 * Copyright (c) Tiny Technologies, Inc. All rights reserved.
 * Licensed under the LGPL or a commercial license.
 * For LGPL see License.txt in the project root for license information.
 * For commercial licenses see https://www.tiny.cloud/
 *
 * Version: 5.4.1 (2020-07-08)
 */
!(function () {
  
  let e;
    let t;
    let r;
    const n = tinymce.util.Tools.resolve("tinymce.PluginManager");
    var p = function () {
      return (p =
        Object.assign ||
        function (e) {
          for (var t, r = 1, n = arguments.length; r < n; r++)
            for (const i in (t = arguments[r]))
              Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
          return e;
        }).apply(this, arguments);
    };
    const a = function (e) {
      return function () {
        return e;
      };
    };
    const o = a(!1);
    const c = a(!0);
    const i = function () {
      return u;
    };
    var u =
      ((e = function (e) {
        return e.isNone();
      }),
      {
        fold (e, t) {
          return e();
        },
        is: o,
        isSome: o,
        isNone: c,
        getOr: (r = function (e) {
          return e;
        }),
        getOrThunk: (t = function (e) {
          return e();
        }),
        getOrDie (e) {
          throw new Error(e || "error: getOrDie called on none.");
        },
        getOrNull: a(null),
        getOrUndefined: a(undefined),
        or: r,
        orThunk: t,
        map: i,
        each () {},
        bind: i,
        exists: o,
        forall: c,
        filter: i,
        equals: e,
        equals_: e,
        toArray () {
          return [];
        },
        toString: a("none()"),
      });
    var s = function (r) {
      const e = a(r);
        const t = function () {
          return i;
        };
        const n = function (e) {
          return e(r);
        };
        var i = {
          fold (e, t) {
            return t(r);
          },
          is (e) {
            return r === e;
          },
          isSome: c,
          isNone: o,
          getOr: e,
          getOrThunk: e,
          getOrDie: e,
          getOrNull: e,
          getOrUndefined: e,
          or: t,
          orThunk: t,
          map (e) {
            return s(e(r));
          },
          each (e) {
            e(r);
          },
          bind: n,
          exists: n,
          forall: n,
          filter (e) {
            return e(r) ? i : u;
          },
          toArray () {
            return [r];
          },
          toString () {
            return `some(${  r  })`;
          },
          equals (e) {
            return e.is(r);
          },
          equals_ (e, t) {
            return e.fold(o, function (e) {
              return t(r, e);
            });
          },
        };
      return i;
    };
    const l = {
      some: s,
      none: i,
      from (e) {
        return e === null || e === undefined ? u : s(e);
      },
    };
    const m = function (n) {
      return function (e) {
        return (
          (r = typeof (t = e)),
          (t === null
            ? "null"
            : r == "object" &&
              (Array.prototype.isPrototypeOf(t) ||
                (t.constructor && t.constructor.name === "Array"))
            ? "array"
            : r == "object" &&
              (String.prototype.isPrototypeOf(t) ||
                (t.constructor && t.constructor.name === "String"))
            ? "string"
            : r) === n
        );
        let t; let r;
      };
    };
    const d = m("string");
    const h = m("object");
    const g = m("array");
    const v = Array.prototype.push;
    const f = function (e, t) {
      for (let r = 0, n = e.length; r < n; r++) {
        t(e[r], r);
      }
    };
    const w = function (e) {
      let t = e;
      return {
        get () {
          return t;
        },
        set (e) {
          t = e;
        },
      };
    };
    const b = Object.keys;
    const y = Object.hasOwnProperty;
    const x = function (e, t) {
      return j(e, t) ? l.from(e[t]) : l.none();
    };
    var j = function (e, t) {
      return y.call(e, t);
    };
    const O = function (e) {
      return e.getParam("media_scripts");
    };
    const S = tinymce.util.Tools.resolve("tinymce.util.Tools");
    const _ = tinymce.util.Tools.resolve("tinymce.dom.DOMUtils");
    const k = tinymce.util.Tools.resolve("tinymce.html.SaxParser");
    const A = function (e, t) {
      if (e)
        for (let r = 0; r < e.length; r++)
          if (t.indexOf(e[r].filter) !== -1) return e[r];
    };
    const T = _.DOM;
    const C = function (e) {
      return e.replace(/px$/, "");
    };
    const P = function (o, e) {
      const c = w(!1);
        let u = {};
      return (
        k({
          validate: !1,
          allow_conditional_comments: !0,
          start (e, t) {
            if (!c.get())
              if (j(t.map, "data-ephox-embed-iri"))
                c.set(!0),
                  (i = (n = t).map.style),
                  (a = i ? T.parseStyle(i) : {}),
                  (u = {
                    type: "ephox-embed-iri",
                    source: n.map["data-ephox-embed-iri"],
                    altsource: "",
                    poster: "",
                    width: x(a, "max-width").map(C).getOr(""),
                    height: x(a, "max-height").map(C).getOr(""),
                  });
              else {
                if (
                  (u.source || e !== "param" || (u.source = t.map.movie),
                  (e !== "iframe" &&
                    e !== "object" &&
                    e !== "embed" &&
                    e !== "video" &&
                    e !== "audio") ||
                    (u.type || (u.type = e), (u = S.extend(t.map, u))),
                  e === "script")
                ) {
                  const r = A(o, t.map.src);
                  if (!r) return;
                  u = {
                    type: "script",
                    source: t.map.src,
                    width: String(r.width),
                    height: String(r.height),
                  };
                }
                e === "source" &&
                  (u.source
                    ? u.altsource || (u.altsource = t.map.src)
                    : (u.source = t.map.src)),
                  e !== "img" || u.poster || (u.poster = t.map.src);
              }
            let n; let i; let a;
          },
        }).parse(e),
        (u.source = u.source || u.src || u.data),
        (u.altsource = u.altsource || ""),
        (u.poster = u.poster || ""),
        u
      );
    };
    const D = function (e) {
      const t = {
        mp3: "audio/mpeg",
        m4a: "audio/x-m4a",
        wav: "audio/wav",
        mp4: "video/mp4",
        webm: "video/webm",
        ogg: "video/ogg",
        swf: "application/x-shockwave-flash",
      }[e.toLowerCase().split(".").pop()];
      return t || "";
    };
    const $ = tinymce.util.Tools.resolve("tinymce.html.Schema");
    const F = tinymce.util.Tools.resolve("tinymce.html.Writer");
    const M = _.DOM;
    const z = function (e) {
      return /^[0-9.]+$/.test(e) ? `${e  }px` : e;
    };
    const N = function (a, e) {
      !(function (e, t) {
        for (let r = b(e), n = 0, i = r.length; n < i; n++) {
          const a = r[n];
          t(e[a], a);
        }
      })(e, function (e, t) {
        const r = `${  e}`;
        if (a.map[t])
          for (let n = a.length; n--; ) {
            const i = a[n];
            i.name === t &&
              (r
                ? ((a.map[t] = r), (i.value = r))
                : (delete a.map[t], a.splice(n, 1)));
          }
        else r && (a.push({ name: t, value: r }), (a.map[t] = r));
      });
    };
    const U = ["source", "altsource"];
    const E = function (e, c, u) {
      let s;
        const l = F();
        const m = w(!1);
        let d = 0;
      return (
        k(
          {
            validate: !1,
            allow_conditional_comments: !0,
            comment (e) {
              l.comment(e);
            },
            cdata (e) {
              l.cdata(e);
            },
            text (e, t) {
              l.text(e, t);
            },
            start (e, t, r) {
              if (!m.get())
                if (j(t.map, "data-ephox-embed-iri"))
                  m.set(!0),
                    (n = c),
                    (a = (i = t).map.style),
                    ((o = a ? M.parseStyle(a) : {})["max-width"] = z(n.width)),
                    (o["max-height"] = z(n.height)),
                    N(i, { style: M.serializeStyle(o) });
                else {
                  switch (e) {
                    case "video":
                    case "object":
                    case "embed":
                    case "img":
                    case "iframe":
                      c.height !== undefined &&
                        c.width !== undefined &&
                        N(t, { width: c.width, height: c.height });
                  }
                  if (u)
                    switch (e) {
                      case "video":
                        N(t, { poster: c.poster, src: "" }),
                          c.altsource && N(t, { src: "" });
                        break;
                      case "iframe":
                        N(t, { src: c.source });
                        break;
                      case "source":
                        if (
                          d < 2 &&
                          (N(t, { src: c[U[d]], type: c[`${U[d]  }mime`] }),
                          !c[U[d]])
                        )
                          return;
                        d++;
                        break;
                      case "img":
                        if (!c.poster) return;
                        s = !0;
                    }
                }
              let n; let i; let a; let o;
              l.start(e, t, r);
            },
            end (e) {
              if (!m.get()) {
                if (e === "video" && u)
                  for (let t = 0; t < 2; t++)
                    if (c[U[t]]) {
                      const r = [];
                      (r.map = {}),
                        d < t &&
                          (N(r, { src: c[U[t]], type: c[`${U[t]  }mime`] }),
                          l.start("source", r, !0));
                    }
                if (c.poster && e === "object" && u && !s) {
                  const n = [];
                  (n.map = {}),
                    N(n, { src: c.poster, width: c.width, height: c.height }),
                    l.start("img", n, !0);
                }
              }
              l.end(e);
            },
          },
          $({})
        ).parse(e),
        l.getContent()
      );
    };
    const R = [
      {
        regex: /youtu\.be\/([\w\-_\?&=.]+)/i,
        type: "iframe",
        w: 560,
        h: 314,
        url: "www.youtube.com/embed/$1",
        allowFullscreen: !0,
      },
      {
        regex: /youtube\.com(.+)v=([^&]+)(&([a-z0-9&=\-_]+))?/i,
        type: "iframe",
        w: 560,
        h: 314,
        url: "www.youtube.com/embed/$2?$4",
        allowFullscreen: !0,
      },
      {
        regex: /youtube.com\/embed\/([a-z0-9\?&=\-_]+)/i,
        type: "iframe",
        w: 560,
        h: 314,
        url: "www.youtube.com/embed/$1",
        allowFullscreen: !0,
      },
      {
        regex: /vimeo\.com\/([0-9]+)/,
        type: "iframe",
        w: 425,
        h: 350,
        url:
          "player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc",
        allowFullscreen: !0,
      },
      {
        regex: /vimeo\.com\/(.*)\/([0-9]+)/,
        type: "iframe",
        w: 425,
        h: 350,
        url: "player.vimeo.com/video/$2?title=0&amp;byline=0",
        allowFullscreen: !0,
      },
      {
        regex: /maps\.google\.([a-z]{2,3})\/maps\/(.+)msid=(.+)/,
        type: "iframe",
        w: 425,
        h: 350,
        url: 'maps.google.com/maps/ms?msid=$2&output=embed"',
        allowFullscreen: !1,
      },
      {
        regex: /dailymotion\.com\/video\/([^_]+)/,
        type: "iframe",
        w: 480,
        h: 270,
        url: "www.dailymotion.com/embed/video/$1",
        allowFullscreen: !0,
      },
      {
        regex: /dai\.ly\/([^_]+)/,
        type: "iframe",
        w: 480,
        h: 270,
        url: "www.dailymotion.com/embed/video/$1",
        allowFullscreen: !0,
      },
    ];
    const L = function (t) {
      const e = R.filter(function (e) {
        return e.regex.test(t);
      });
      return e.length > 0
        ? S.extend({}, e[0], {
            url: (function (e, t) {
              for (
                var r,
                  n =
                    (r = t.match(/^(https?:\/\/|www\.)(.+)$/i)) &&
                    r.length > 1 &&
                    r[1] !== "www."
                      ? r[1]
                      : "https://",
                  i = e.regex.exec(t),
                  a = n + e.url,
                  o = function (e) {
                    a = a.replace(`$${  e}`, function () {
                      return i[e] ? i[e] : "";
                    });
                  },
                  c = 0;
                c < i.length;
                c++
              )
                o(c);
              return a.replace(/\?$/, "");
            })(e[0], t),
          })
        : null;
    };
    const I = function (r, e) {
      const n = S.extend({}, e);
      if (!n.source && (S.extend(n, P(O(r), n.embed)), !n.source)) return "";
      n.altsource || (n.altsource = ""),
        n.poster || (n.poster = ""),
        (n.source = r.convertURL(n.source, "source")),
        (n.altsource = r.convertURL(n.altsource, "source")),
        (n.sourcemime = D(n.source)),
        (n.altsourcemime = D(n.altsource)),
        (n.poster = r.convertURL(n.poster, "poster"));
      const t = L(n.source);
      if (
        (t &&
          ((n.source = t.url),
          (n.type = t.type),
          (n.allowFullscreen = t.allowFullscreen),
          (n.width = n.width || String(t.w)),
          (n.height = n.height || String(t.h))),
        n.embed)
      )
        return E(n.embed, n, !0);
      const i = A(O(r), n.source);
      i &&
        ((n.type = "script"),
        (n.width = String(i.width)),
        (n.height = String(i.height)));
      let a;
        let o;
        let c;
        let u;
        let s;
        let l;
        let m;
        let d;
        const h = r.getParam("audio_template_callback");
        const f = r.getParam("video_template_callback");
      return (
        (n.width = n.width || "300"),
        (n.height = n.height || "150"),
        S.each(n, function (e, t) {
          n[t] = r.dom.encode(`${  e}`);
        }),
        n.type === "iframe"
          ? ((d = (m = n).allowFullscreen ? ' allowFullscreen="1"' : ""),
            `<iframe src="${ 
              m.source 
              }" width="${ 
              m.width 
              }" height="${ 
              m.height 
              }"${ 
              d 
              }></iframe>`)
          : n.sourcemime === "application/x-shockwave-flash"
          ? ((l =
              `<object data="${ 
              (s = n).source 
              }" width="${ 
              s.width 
              }" height="${ 
              s.height 
              }" type="application/x-shockwave-flash">`),
            s.poster &&
              (l +=
                `<img src="${ 
                s.poster 
                }" width="${ 
                s.width 
                }" height="${ 
                s.height 
                }" />`),
            (l += "</object>"))
          : n.sourcemime.indexOf("audio") !== -1
          ? ((c = n),
            (u = h)
              ? u(c)
              : `<audio controls="controls" src="${ 
                c.source 
                }">${ 
                c.altsource
                  ? `\n<source src="${ 
                    c.altsource 
                    }"${ 
                    c.altsourcemime ? ` type="${  c.altsourcemime  }"` : "" 
                    } />\n`
                  : "" 
                }</audio>`)
          : n.type === "script"
          ? `<script src="${  n.source  }"></script>`
          : ((a = n),
            (o = f)
              ? o(a)
              : `<video width="${ 
                a.width 
                }" height="${ 
                a.height 
                }"${ 
                a.poster ? ` poster="${  a.poster  }"` : "" 
                } controls="controls">\n<source src="${ 
                a.source 
                }"${ 
                a.sourcemime ? ` type="${  a.sourcemime  }"` : "" 
                } />\n${ 
                a.altsource
                  ? `<source src="${ 
                    a.altsource 
                    }"${ 
                    a.altsourcemime ? ` type="${  a.altsourcemime  }"` : "" 
                    } />\n`
                  : "" 
                }</video>`)
      );
    };
    const q = tinymce.util.Tools.resolve("tinymce.util.Promise");
    const B = {};
    const W = function (t) {
      return function (e) {
        return I(t, e);
      };
    };
    const G = function (e, t) {
      let r;
        let n;
        let i;
        let a;
        let o;
        const c = e.getParam("media_url_resolver");
      return c
        ? ((i = t),
          (a = W(e)),
          (o = c),
          new q(function (t, e) {
            const r = function (e) {
              return (
                e.html && (B[i.source] = e),
                t({ url: i.source, html: e.html ? e.html : a(i) })
              );
            };
            B[i.source] ? r(B[i.source]) : o({ url: i.source }, r, e);
          }))
        : ((r = t),
          (n = W(e)),
          new q(function (e) {
            e({ html: n(r), url: r.source });
          }));
    };
    const H = function (a, o, c) {
      return function (e) {
        let t;
          const r = function () {
            return x(a, e);
          };
          const n = function () {
            return x(o, e);
          };
          const i = function (e) {
            return x(e, "value").bind(function (e) {
              return e.length > 0 ? l.some(e) : l.none();
            });
          };
        return (
          ((t = {})[e] = (e === c
            ? r().bind(function (e) {
                return h(e)
                  ? i(e).orThunk(n)
                  : n().orThunk(function () {
                      return l.from(e);
                    });
              })
            : n().orThunk(function () {
                return r().bind(function (e) {
                  return h(e) ? i(e) : l.from(e);
                });
              })
          ).getOr("")),
          t
        );
      };
    };
    const J = function (e, t) {
      let r;
        let n;
        const i = t
          ? x(e, t)
              .bind(function (e) {
                return x(e, "meta");
              })
              .getOr({})
          : {};
        const a = H(e, i, t);
      return {
        ...a("source"), ...a("altsource"), ...a("poster"), ...a("embed"),
        ...((r = i),
        (n = {}),
        x(e, "dimensions").each(function (e) {
          f(["width", "height"], function (t) {
            x(r, t)
              .orThunk(function () {
                return x(e, t);
              })
              .each(function (e) {
                return (n[t] = e);
              });
          });
        }),
        n)
      };
    };
    const K = function (e) {
      const n = {...e, source: { value: x(e, "source").getOr("") },
        altsource: { value: x(e, "altsource").getOr("") },
        poster: { value: x(e, "poster").getOr("") },};
      return (
        f(["width", "height"], function (r) {
          x(e, r).each(function (e) {
            const t = n.dimensions || {};
            (t[r] = e), (n.dimensions = t);
          });
        }),
        n
      );
    };
    const Q = function (r) {
      return function (e) {
        const t =
          e && e.msg
            ? `Media embed handler error: ${  e.msg}`
            : "Media embed handler threw unknown error.";
        r.notificationManager.open({ type: "error", text: t });
      };
    };
    const V = function (e, t) {
      return P(O(e), t);
    };
    const X = function (i, a) {
      return function (e) {
        if (d(e.url) && e.url.trim().length > 0) {
          const t = e.html;
            const r = V(a, t);
            const n = {...r, source: e.url, embed: t};
          i.setData(K(n));
        }
      };
    };
    const Y = function (e, t) {
      const r = e.dom.select("img[data-mce-object]");
      e.insertContent(t),
        (function (e, t) {
          for (
            var r = e.dom.select("img[data-mce-object]"), n = 0;
            n < t.length;
            n++
          )
            for (let i = r.length - 1; i >= 0; i--)
              t[n] === r[i] && r.splice(i, 1);
          e.selection.select(r[0]);
        })(e, r),
        e.nodeChanged();
    };
    const Z = function (e, t, r) {
      let n;
      (t.embed = E(t.embed, t)),
        t.embed &&
        (e.source === t.source || ((n = t.source), B.hasOwnProperty(n)))
          ? Y(r, t.embed)
          : G(r, t)
              .then(function (e) {
                Y(r, e.html);
              })
              .catch(Q(r));
    };
    const ee = function (m) {
      let e;
        let t;
        let r;
        let n;
        const i =
          ((r = (e = m).selection.getNode()),
          (n =
            (t = r).getAttribute("data-mce-object") ||
            t.getAttribute("data-ephox-embed-iri")
              ? e.serializer.serialize(r, { selection: !0 })
              : ""),
          ({embed: n, ...P(O(e), n)}));
        const d = w(i);
        const a = K(i);
        const o = {
          title: "General",
          name: "general",
          items: (function (e) {
            for (var t = [], r = 0, n = e.length; r < n; ++r) {
              if (!g(e[r]))
                throw new Error(
                  `Arr.flatten item ${  r  } was not an array, input: ${  e}`
                );
              v.apply(t, e[r]);
            }
            return t;
          })([
            [
              {
                name: "source",
                type: "urlinput",
                filetype: "media",
                label: "Source",
              },
            ],
            m.getParam("media_dimensions", !0)
              ? [
                  {
                    type: "sizeinput",
                    name: "dimensions",
                    label: "Constrain proportions",
                    constrain: !0,
                  },
                ]
              : [],
          ]),
        };
        const c = {
          title: "Embed",
          items: [
            {
              type: "textarea",
              name: "embed",
              label: "Paste your embed code below:",
            },
          ],
        };
        const u = [];
      m.getParam("media_alt_source", !0) &&
        u.push({
          name: "altsource",
          type: "urlinput",
          filetype: "media",
          label: "Alternative source URL",
        }),
        m.getParam("media_poster", !0) &&
          u.push({
            name: "poster",
            type: "urlinput",
            filetype: "image",
            label: "Media poster (Image URL)",
          });
      const s = { title: "Advanced", name: "advanced", items: u };
        const l = [o, c];
      u.length > 0 && l.push(s);
      const h = { type: "tabpanel", tabs: l };
        var f = m.windowManager.open({
          title: "Insert/Edit Media",
          size: "normal",
          body: h,
          buttons: [
            { type: "cancel", name: "cancel", text: "Cancel" },
            { type: "submit", name: "save", text: "Save", primary: !0 },
          ],
          onSubmit (e) {
            const t = J(e.getData());
            Z(d.get(), t, m), e.close();
          },
          onChange (e, t) {
            switch (t.name) {
              case "source":
                (s = d.get()),
                  (l = J(e.getData(), "source")),
                  s.source !== l.source &&
                    (X(f, m)({ url: l.source, html: "" }),
                    G(m, l).then(X(f, m)).catch(Q(m)));
                break;
              case "embed":
                (c = J((o = e).getData())),
                  (u = V(m, c.embed)),
                  o.setData(K(u));
                break;
              case "dimensions":
              case "altsource":
              case "poster":
                (r = e),
                  (n = t.name),
                  (i = J(r.getData(), n)),
                  (a = I(m, i)),
                  r.setData(K({...i, embed: a}));
            }
            let r; let n; let i; let a; let o; let c; let u; let s; let l;
            d.set(J(e.getData()));
          },
          initialData: a,
        });
    };
    const te = tinymce.util.Tools.resolve("tinymce.html.Node");
    const re = tinymce.util.Tools.resolve("tinymce.Env");
    const ne = function (a, e) {
      if (!1 === a.getParam("media_filter_html", !0)) return e;
      let o;
        const c = F();
      return (
        k(
          {
            validate: !1,
            allow_conditional_comments: !1,
            comment (e) {
              c.comment(e);
            },
            cdata (e) {
              c.cdata(e);
            },
            text (e, t) {
              c.text(e, t);
            },
            start (e, t, r) {
              if (
                ((o = !0), e !== "script" && e !== "noscript" && e !== "svg")
              ) {
                for (let n = t.length - 1; n >= 0; n--) {
                  const i = t[n].name;
                  i.indexOf("on") === 0 && (delete t.map[i], t.splice(n, 1)),
                    i === "style" &&
                      (t[n].value = a.dom.serializeStyle(
                        a.dom.parseStyle(t[n].value),
                        e
                      ));
                }
                c.start(e, t, r), (o = !1);
              }
            },
            end (e) {
              o || c.end(e);
            },
          },
          $({})
        ).parse(e),
        c.getContent()
      );
    };
    const ie = function (e, t) {
      const r = t.name;
        const n = new te("span", 1);
      n.attr({
        contentEditable: "false",
        style: t.attr("style"),
        "data-mce-object": r,
        class: `mce-preview-object mce-object-${  r}`,
      }),
        ae(e, t, n);
      const i = new te(r, 1);
      i.attr({
        src: t.attr("src"),
        allowfullscreen: t.attr("allowfullscreen"),
        style: t.attr("style"),
        class: t.attr("class"),
        width: t.attr("width"),
        height: t.attr("height"),
        frameborder: "0",
      });
      const a = new te("span", 1);
      return a.attr("class", "mce-shim"), n.append(i), n.append(a), n;
    };
    var ae = function (e, t, r) {
      let n;
        let i;
        let a;
        const o = t.attributes;
      for (a = o.length; a--; )
        (n = o[a].name),
          (i = o[a].value),
          n !== "width" &&
            n !== "height" &&
            n !== "style" &&
            ((n !== "data" && n !== "src") || (i = e.convertURL(i, n)),
            r.attr(`data-mce-p-${  n}`, i));
      const c = t.firstChild && t.firstChild.value;
      c && (r.attr("data-mce-html", escape(ne(e, c))), (r.firstChild = null));
    };
    const oe = function (e) {
      for (; (e = e.parent); )
        if (
          e.attr("data-ephox-embed-iri") ||
          ((t = e.attr("class")) && /\btiny-pageembed\b/.test(t))
        )
          return !0;
      let t;
      return !1;
    };
    const ce = function (u) {
      return function (e) {
        for (var t, r, n, i, a, o, c = e.length; c--; )
          (t = e[c]).parent &&
            (t.parent.attr("data-mce-object") ||
              (t.name === "script" && !(r = A(O(u), t.attr("src")))) ||
              (r &&
                (r.width && t.attr("width", r.width.toString()),
                r.height && t.attr("height", r.height.toString())),
              t.name === "iframe" &&
              u.getParam("media_live_embeds", !0) &&
              re.ceFalse
                ? oe(t) || t.replace(ie(u, t))
                : oe(t) ||
                  t.replace(
                    ((n = u),
                    (o = void 0),
                    (a = (i = t).name),
                    ((o = new te("img", 1)).shortEnded = !0),
                    ae(n, i, o),
                    o.attr({
                      width: i.attr("width") || "300",
                      height:
                        i.attr("height") || (a === "audio" ? "30" : "150"),
                      style: i.attr("style"),
                      src: re.transparentSrc,
                      "data-mce-object": a,
                      class: `mce-object mce-object-${  a}`,
                    }),
                    o)
                  )));
      };
    };
    const ue = function (e) {
      let t; let r;
      e.ui.registry.addToggleButton("media", {
        tooltip: "Insert/edit media",
        icon: "embed",
        onAction () {
          e.execCommand("mceMedia");
        },
        onSetup:
          ((t = e),
          (r = [
            "img[data-mce-object]",
            "span[data-mce-object]",
            "div[data-ephox-embed-iri]",
          ]),
          function (e) {
            return t.selection.selectorChangedWithUnbind(
              r.join(","),
              e.setActive
            ).unbind;
          }),
      }),
        e.ui.registry.addMenuItem("media", {
          icon: "embed",
          text: "Media...",
          onAction () {
            e.execCommand("mceMedia");
          },
        });
    };
  !(function se() {
    n.add("media", function (e) {
      let t; let d; let r; let n;
      return (
        (t = e).addCommand("mceMedia", function () {
          ee(t);
        }),
        ue(e),
        e.on("ResolveName", function (e) {
          let t;
          e.target.nodeType === 1 &&
            (t = e.target.getAttribute("data-mce-object")) &&
            (e.name = t);
        }),
        (d = e).on("preInit", function () {
          const t = d.schema.getSpecialElements();
          S.each("video audio iframe object".split(" "), function (e) {
            t[e] = new RegExp(`</${  e  }[^>]*>`, "gi");
          });
          const r = d.schema.getBoolAttrs();
          S.each(
            "webkitallowfullscreen mozallowfullscreen allowfullscreen".split(
              " "
            ),
            function (e) {
              r[e] = {};
            }
          ),
            d.parser.addNodeFilter(
              "iframe,video,audio,object,embed,script",
              ce(d)
            ),
            d.serializer.addAttributeFilter("data-mce-object", function (e, t) {
              for (var r, n, i, a, o, c, u, s, l = e.length; l--; )
                if ((r = e[l]).parent) {
                  for (
                    u = r.attr(t),
                      n = new te(u, 1),
                      u !== "audio" &&
                        u !== "script" &&
                        ((s = r.attr("class")) &&
                        s.indexOf("mce-preview-object") !== -1
                          ? n.attr({
                              width: r.firstChild.attr("width"),
                              height: r.firstChild.attr("height"),
                            })
                          : n.attr({
                              width: r.attr("width"),
                              height: r.attr("height"),
                            })),
                      n.attr({ style: r.attr("style") }),
                      i = (a = r.attributes).length;
                    i--;

                  ) {
                    const m = a[i].name;
                    m.indexOf("data-mce-p-") === 0 &&
                      n.attr(m.substr(11), a[i].value);
                  }
                  u === "script" && n.attr("type", "text/javascript"),
                    (o = r.attr("data-mce-html")) &&
                      (((c = new te("#text", 3)).raw = !0),
                      (c.value = ne(d, unescape(o))),
                      n.append(c)),
                    r.replace(n);
                }
            });
        }),
        d.on("SetContent", function () {
          d.$("span.mce-preview-object").each(function (e, t) {
            const r = d.$(t);
            r.find("span.mce-shim").length === 0 &&
              r.append('<span class="mce-shim"></span>');
          });
        }),
        (r = e).on("click keyup touchend", function () {
          const e = r.selection.getNode();
          e &&
            r.dom.hasClass(e, "mce-preview-object") &&
            r.dom.getAttrib(e, "data-mce-selected") &&
            e.setAttribute("data-mce-selected", "2");
        }),
        r.on("ObjectSelected", function (e) {
          const t = e.target.getAttribute("data-mce-object");
          (t !== "audio" && t !== "script") || e.preventDefault();
        }),
        r.on("ObjectResized", function (e) {
          let t;
            const r = e.target;
          r.getAttribute("data-mce-object") &&
            (t = r.getAttribute("data-mce-html")) &&
            ((t = unescape(t)),
            r.setAttribute(
              "data-mce-html",
              escape(E(t, { width: String(e.width), height: String(e.height) }))
            ));
        }),
        (n = e),
        {
          showDialog () {
            ee(n);
          },
        }
      );
    });
  })();
})();
